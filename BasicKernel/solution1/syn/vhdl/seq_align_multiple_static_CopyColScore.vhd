-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seq_align_multiple_static_CopyColScore is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init_col_scr_local_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_col_scr_local_0_ce0 : OUT STD_LOGIC;
    init_col_scr_local_0_we0 : OUT STD_LOGIC;
    init_col_scr_local_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_col_scr_local_0_ce1 : OUT STD_LOGIC;
    init_col_scr_local_0_we1 : OUT STD_LOGIC;
    init_col_scr_local_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_col_scr_local_1_ce0 : OUT STD_LOGIC;
    init_col_scr_local_1_we0 : OUT STD_LOGIC;
    init_col_scr_local_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_col_scr_local_1_ce1 : OUT STD_LOGIC;
    init_col_scr_local_1_we1 : OUT STD_LOGIC;
    init_col_scr_local_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_col_scr_local_2_ce0 : OUT STD_LOGIC;
    init_col_scr_local_2_we0 : OUT STD_LOGIC;
    init_col_scr_local_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_local_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    init_col_scr_local_2_ce1 : OUT STD_LOGIC;
    init_col_scr_local_2_we1 : OUT STD_LOGIC;
    init_col_scr_local_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    init_col_scr_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_col_scr_ce0 : OUT STD_LOGIC;
    init_col_scr_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    init_col_scr_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_col_scr_ce1 : OUT STD_LOGIC;
    init_col_scr_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    idx : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of seq_align_multiple_static_CopyColScore is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_13 : STD_LOGIC_VECTOR (7 downto 0) := "00010011";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv8_17 : STD_LOGIC_VECTOR (7 downto 0) := "00010111";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_1C : STD_LOGIC_VECTOR (7 downto 0) := "00011100";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv8_1E : STD_LOGIC_VECTOR (7 downto 0) := "00011110";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln486_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_1_fu_1401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_2_fu_1421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_3_fu_1431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_4_fu_1451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_5_fu_1461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_6_fu_1481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_7_fu_1491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_8_fu_1511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_9_fu_1521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_10_fu_1541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_11_fu_1551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_12_fu_1571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_13_fu_1581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_14_fu_1601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_15_fu_1611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_16_fu_1631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_17_fu_1641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_18_fu_1661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_19_fu_1671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_20_fu_1691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_21_fu_1701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_22_fu_1721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_23_fu_1731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_24_fu_1751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_25_fu_1761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_26_fu_1781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_27_fu_1791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_28_fu_1811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_29_fu_1821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_30_fu_1841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_31_fu_1851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln486_fu_1406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_3_fu_1411_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_6_fu_1436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_9_fu_1441_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_11_fu_1466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_14_fu_1471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_17_fu_1496_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_20_fu_1501_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_23_fu_1526_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_26_fu_1531_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_29_fu_1556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_32_fu_1561_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_35_fu_1586_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_38_fu_1591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_41_fu_1616_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_44_fu_1621_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_47_fu_1646_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_50_fu_1651_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_53_fu_1676_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_56_fu_1681_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_59_fu_1706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_62_fu_1711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_65_fu_1736_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_68_fu_1741_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_71_fu_1766_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_74_fu_1771_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_77_fu_1796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_80_fu_1801_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_83_fu_1826_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_86_fu_1831_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_89_fu_1856_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln486_92_fu_1861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln486_fu_1395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_1_fu_1416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_2_fu_1426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_3_fu_1446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_4_fu_1456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_5_fu_1476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_6_fu_1486_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_7_fu_1506_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_8_fu_1516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_9_fu_1536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_10_fu_1546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_11_fu_1566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_12_fu_1576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_13_fu_1596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_14_fu_1606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_15_fu_1626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_16_fu_1636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_17_fu_1656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_18_fu_1666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_19_fu_1686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_20_fu_1696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_21_fu_1716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_22_fu_1726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_23_fu_1746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_24_fu_1756_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_25_fu_1776_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_26_fu_1786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_27_fu_1806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_28_fu_1816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_29_fu_1836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln486_30_fu_1846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln486_10_fu_1546_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_B));
    add_ln486_11_fu_1566_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_C));
    add_ln486_12_fu_1576_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_D));
    add_ln486_13_fu_1596_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_E));
    add_ln486_14_fu_1606_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_F));
    add_ln486_15_fu_1626_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_10));
    add_ln486_16_fu_1636_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_11));
    add_ln486_17_fu_1656_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_12));
    add_ln486_18_fu_1666_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_13));
    add_ln486_19_fu_1686_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_14));
    add_ln486_1_fu_1416_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_2));
    add_ln486_20_fu_1696_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_15));
    add_ln486_21_fu_1716_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_16));
    add_ln486_22_fu_1726_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_17));
    add_ln486_23_fu_1746_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_18));
    add_ln486_24_fu_1756_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_19));
    add_ln486_25_fu_1776_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1A));
    add_ln486_26_fu_1786_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1B));
    add_ln486_27_fu_1806_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1C));
    add_ln486_28_fu_1816_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1D));
    add_ln486_29_fu_1836_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1E));
    add_ln486_2_fu_1426_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_3));
    add_ln486_30_fu_1846_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1F));
    add_ln486_3_fu_1446_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_4));
    add_ln486_4_fu_1456_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_5));
    add_ln486_5_fu_1476_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_6));
    add_ln486_6_fu_1486_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_7));
    add_ln486_7_fu_1506_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_8));
    add_ln486_8_fu_1516_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_9));
    add_ln486_9_fu_1536_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_A));
    add_ln486_fu_1395_p2 <= std_logic_vector(unsigned(idx) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln486_1_fu_1401_p1, zext_ln486_3_fu_1431_p1, zext_ln486_5_fu_1461_p1, zext_ln486_7_fu_1491_p1, zext_ln486_9_fu_1521_p1, zext_ln486_11_fu_1551_p1, zext_ln486_13_fu_1581_p1, zext_ln486_15_fu_1611_p1, zext_ln486_17_fu_1641_p1, zext_ln486_19_fu_1671_p1, zext_ln486_21_fu_1701_p1, zext_ln486_23_fu_1731_p1, zext_ln486_25_fu_1761_p1, zext_ln486_27_fu_1791_p1, zext_ln486_29_fu_1821_p1, zext_ln486_31_fu_1851_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_address0 <= zext_ln486_31_fu_1851_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_address0 <= zext_ln486_29_fu_1821_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_address0 <= zext_ln486_27_fu_1791_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_address0 <= zext_ln486_25_fu_1761_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_address0 <= zext_ln486_23_fu_1731_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_address0 <= zext_ln486_21_fu_1701_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_address0 <= zext_ln486_19_fu_1671_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_address0 <= zext_ln486_17_fu_1641_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_address0 <= zext_ln486_15_fu_1611_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_address0 <= zext_ln486_13_fu_1581_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_address0 <= zext_ln486_11_fu_1551_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_address0 <= zext_ln486_9_fu_1521_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_address0 <= zext_ln486_7_fu_1491_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_address0 <= zext_ln486_5_fu_1461_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_address0 <= zext_ln486_3_fu_1431_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_address0 <= zext_ln486_1_fu_1401_p1(8 - 1 downto 0);
        else 
            init_col_scr_address0 <= "XXXXXXXX";
        end if; 
    end process;


    init_col_scr_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln486_fu_1390_p1, zext_ln486_2_fu_1421_p1, zext_ln486_4_fu_1451_p1, zext_ln486_6_fu_1481_p1, zext_ln486_8_fu_1511_p1, zext_ln486_10_fu_1541_p1, zext_ln486_12_fu_1571_p1, zext_ln486_14_fu_1601_p1, zext_ln486_16_fu_1631_p1, zext_ln486_18_fu_1661_p1, zext_ln486_20_fu_1691_p1, zext_ln486_22_fu_1721_p1, zext_ln486_24_fu_1751_p1, zext_ln486_26_fu_1781_p1, zext_ln486_28_fu_1811_p1, zext_ln486_30_fu_1841_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_address1 <= zext_ln486_30_fu_1841_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_address1 <= zext_ln486_28_fu_1811_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_address1 <= zext_ln486_26_fu_1781_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_address1 <= zext_ln486_24_fu_1751_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_address1 <= zext_ln486_22_fu_1721_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_address1 <= zext_ln486_20_fu_1691_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_address1 <= zext_ln486_18_fu_1661_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_address1 <= zext_ln486_16_fu_1631_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_address1 <= zext_ln486_14_fu_1601_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_address1 <= zext_ln486_12_fu_1571_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_address1 <= zext_ln486_10_fu_1541_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_address1 <= zext_ln486_8_fu_1511_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_address1 <= zext_ln486_6_fu_1481_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_address1 <= zext_ln486_4_fu_1451_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_address1 <= zext_ln486_2_fu_1421_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_address1 <= zext_ln486_fu_1390_p1(8 - 1 downto 0);
        else 
            init_col_scr_address1 <= "XXXXXXXX";
        end if; 
    end process;


    init_col_scr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_ce0 <= ap_const_logic_1;
        else 
            init_col_scr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_ce1 <= ap_const_logic_1;
        else 
            init_col_scr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            init_col_scr_local_0_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        else 
            init_col_scr_local_0_address0 <= "XXXXXX";
        end if; 
    end process;


    init_col_scr_local_0_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_0_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            init_col_scr_local_0_address1 <= "XXXXXX";
        end if; 
    end process;


    init_col_scr_local_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            init_col_scr_local_0_ce0 <= ap_const_logic_1;
        else 
            init_col_scr_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_0_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_0_ce1 <= ap_const_logic_1;
        else 
            init_col_scr_local_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_0_d0_assign_proc : process(init_col_scr_local_0_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, trunc_ln486_3_fu_1411_p1, trunc_ln486_6_fu_1436_p1, trunc_ln486_11_fu_1466_p1, trunc_ln486_17_fu_1496_p1, trunc_ln486_23_fu_1526_p1, trunc_ln486_29_fu_1556_p1, trunc_ln486_35_fu_1586_p1, trunc_ln486_41_fu_1616_p1, trunc_ln486_47_fu_1646_p1, trunc_ln486_53_fu_1676_p1, trunc_ln486_59_fu_1706_p1, trunc_ln486_65_fu_1736_p1, trunc_ln486_71_fu_1766_p1, trunc_ln486_77_fu_1796_p1, trunc_ln486_83_fu_1826_p1, trunc_ln486_89_fu_1856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_89_fu_1856_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_83_fu_1826_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_77_fu_1796_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_71_fu_1766_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_65_fu_1736_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_59_fu_1706_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_53_fu_1676_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_47_fu_1646_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_41_fu_1616_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_35_fu_1586_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_29_fu_1556_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_23_fu_1526_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_17_fu_1496_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_11_fu_1466_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_6_fu_1436_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_0_d0 <= trunc_ln486_3_fu_1411_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_local_0_d0 <= init_col_scr_local_0_q0;
        else 
            init_col_scr_local_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_col_scr_local_0_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, trunc_ln486_fu_1406_p1, trunc_ln486_9_fu_1441_p1, trunc_ln486_14_fu_1471_p1, trunc_ln486_20_fu_1501_p1, trunc_ln486_26_fu_1531_p1, trunc_ln486_32_fu_1561_p1, trunc_ln486_38_fu_1591_p1, trunc_ln486_44_fu_1621_p1, trunc_ln486_50_fu_1651_p1, trunc_ln486_56_fu_1681_p1, trunc_ln486_62_fu_1711_p1, trunc_ln486_68_fu_1741_p1, trunc_ln486_74_fu_1771_p1, trunc_ln486_80_fu_1801_p1, trunc_ln486_86_fu_1831_p1, trunc_ln486_92_fu_1861_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_92_fu_1861_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_86_fu_1831_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_80_fu_1801_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_74_fu_1771_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_68_fu_1741_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_62_fu_1711_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_56_fu_1681_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_50_fu_1651_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_44_fu_1621_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_38_fu_1591_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_32_fu_1561_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_26_fu_1531_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_20_fu_1501_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_14_fu_1471_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_9_fu_1441_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_0_d1 <= trunc_ln486_fu_1406_p1;
        else 
            init_col_scr_local_0_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_col_scr_local_0_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_0_we0 <= ap_const_logic_1;
        else 
            init_col_scr_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_0_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_0_we1 <= ap_const_logic_1;
        else 
            init_col_scr_local_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            init_col_scr_local_1_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        else 
            init_col_scr_local_1_address0 <= "XXXXXX";
        end if; 
    end process;


    init_col_scr_local_1_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_1_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            init_col_scr_local_1_address1 <= "XXXXXX";
        end if; 
    end process;


    init_col_scr_local_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            init_col_scr_local_1_ce0 <= ap_const_logic_1;
        else 
            init_col_scr_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_1_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_1_ce1 <= ap_const_logic_1;
        else 
            init_col_scr_local_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_1_d0_assign_proc : process(init_col_scr_local_1_q0, init_col_scr_q0, init_col_scr_q1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            init_col_scr_local_1_d0 <= init_col_scr_q1(31 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_1_d0 <= init_col_scr_q0(31 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_local_1_d0 <= init_col_scr_local_1_q0;
        else 
            init_col_scr_local_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_col_scr_local_1_d1_assign_proc : process(init_col_scr_q0, init_col_scr_q1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            init_col_scr_local_1_d1 <= init_col_scr_q0(31 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_1_d1 <= init_col_scr_q1(31 downto 16);
        else 
            init_col_scr_local_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_col_scr_local_1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_1_we0 <= ap_const_logic_1;
        else 
            init_col_scr_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_1_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_1_we1 <= ap_const_logic_1;
        else 
            init_col_scr_local_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_2_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            init_col_scr_local_2_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        else 
            init_col_scr_local_2_address0 <= "XXXXXX";
        end if; 
    end process;


    init_col_scr_local_2_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_2_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            init_col_scr_local_2_address1 <= "XXXXXX";
        end if; 
    end process;


    init_col_scr_local_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            init_col_scr_local_2_ce0 <= ap_const_logic_1;
        else 
            init_col_scr_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_2_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_2_ce1 <= ap_const_logic_1;
        else 
            init_col_scr_local_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_2_d0_assign_proc : process(init_col_scr_local_2_q0, init_col_scr_q0, init_col_scr_q1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            init_col_scr_local_2_d0 <= init_col_scr_q1(47 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_2_d0 <= init_col_scr_q0(47 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            init_col_scr_local_2_d0 <= init_col_scr_local_2_q0;
        else 
            init_col_scr_local_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_col_scr_local_2_d1_assign_proc : process(init_col_scr_q0, init_col_scr_q1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            init_col_scr_local_2_d1 <= init_col_scr_q0(47 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            init_col_scr_local_2_d1 <= init_col_scr_q1(47 downto 32);
        else 
            init_col_scr_local_2_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_col_scr_local_2_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_2_we0 <= ap_const_logic_1;
        else 
            init_col_scr_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_col_scr_local_2_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            init_col_scr_local_2_we1 <= ap_const_logic_1;
        else 
            init_col_scr_local_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln486_11_fu_1466_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_14_fu_1471_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_17_fu_1496_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_20_fu_1501_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_23_fu_1526_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_26_fu_1531_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_29_fu_1556_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_32_fu_1561_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_35_fu_1586_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_38_fu_1591_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_3_fu_1411_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_41_fu_1616_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_44_fu_1621_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_47_fu_1646_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_50_fu_1651_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_53_fu_1676_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_56_fu_1681_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_59_fu_1706_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_62_fu_1711_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_65_fu_1736_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_68_fu_1741_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_6_fu_1436_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_71_fu_1766_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_74_fu_1771_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_77_fu_1796_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_80_fu_1801_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_83_fu_1826_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_86_fu_1831_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_89_fu_1856_p1 <= init_col_scr_q1(16 - 1 downto 0);
    trunc_ln486_92_fu_1861_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_9_fu_1441_p1 <= init_col_scr_q0(16 - 1 downto 0);
    trunc_ln486_fu_1406_p1 <= init_col_scr_q1(16 - 1 downto 0);
    zext_ln486_10_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_9_fu_1536_p2),64));
    zext_ln486_11_fu_1551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_10_fu_1546_p2),64));
    zext_ln486_12_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_11_fu_1566_p2),64));
    zext_ln486_13_fu_1581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_12_fu_1576_p2),64));
    zext_ln486_14_fu_1601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_13_fu_1596_p2),64));
    zext_ln486_15_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_14_fu_1606_p2),64));
    zext_ln486_16_fu_1631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_15_fu_1626_p2),64));
    zext_ln486_17_fu_1641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_16_fu_1636_p2),64));
    zext_ln486_18_fu_1661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_17_fu_1656_p2),64));
    zext_ln486_19_fu_1671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_18_fu_1666_p2),64));
    zext_ln486_1_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_fu_1395_p2),64));
    zext_ln486_20_fu_1691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_19_fu_1686_p2),64));
    zext_ln486_21_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_20_fu_1696_p2),64));
    zext_ln486_22_fu_1721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_21_fu_1716_p2),64));
    zext_ln486_23_fu_1731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_22_fu_1726_p2),64));
    zext_ln486_24_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_23_fu_1746_p2),64));
    zext_ln486_25_fu_1761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_24_fu_1756_p2),64));
    zext_ln486_26_fu_1781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_25_fu_1776_p2),64));
    zext_ln486_27_fu_1791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_26_fu_1786_p2),64));
    zext_ln486_28_fu_1811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_27_fu_1806_p2),64));
    zext_ln486_29_fu_1821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_28_fu_1816_p2),64));
    zext_ln486_2_fu_1421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_1_fu_1416_p2),64));
    zext_ln486_30_fu_1841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_29_fu_1836_p2),64));
    zext_ln486_31_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_30_fu_1846_p2),64));
    zext_ln486_3_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_2_fu_1426_p2),64));
    zext_ln486_4_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_3_fu_1446_p2),64));
    zext_ln486_5_fu_1461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_4_fu_1456_p2),64));
    zext_ln486_6_fu_1481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_5_fu_1476_p2),64));
    zext_ln486_7_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_6_fu_1486_p2),64));
    zext_ln486_8_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_7_fu_1506_p2),64));
    zext_ln486_9_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_8_fu_1516_p2),64));
    zext_ln486_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx),64));
end behav;
