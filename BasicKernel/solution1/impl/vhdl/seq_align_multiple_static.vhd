-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seq_align_multiple_static is
generic (
    C_M_AXI_GMEM_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_4_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_5_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_5_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_5_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_5_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_5_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_5_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_5_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_5_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_6_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_6_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_6_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_6_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_6_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_6_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_6_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_6_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_7_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_7_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_7_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_7_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_7_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_7_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_7_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_7_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_8_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_8_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_8_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_8_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_8_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_8_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_8_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_8_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_9_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_9_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_9_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_9_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_9_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_9_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_9_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_9_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_10_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_10_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_10_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_10_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_10_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_10_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_10_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_10_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_11_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_11_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_11_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_11_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_11_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_11_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_11_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_11_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_12_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_12_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_12_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_12_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_12_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_12_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_12_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_12_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_13_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_13_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_13_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_13_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_13_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_13_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_13_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_13_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_14_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_14_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_14_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_14_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_14_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_14_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_14_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_14_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_15_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_15_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_15_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_15_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_15_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_15_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_15_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_15_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_16_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_16_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_16_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_16_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_16_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_16_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_16_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_16_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_17_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_17_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_17_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_17_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_17_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_17_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_17_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_17_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_18_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_18_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_18_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_18_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_18_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_18_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_18_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_18_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_19_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_19_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_19_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_19_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_19_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_19_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_19_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_19_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_20_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_20_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_20_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_20_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_20_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_20_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_20_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_20_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_21_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_21_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_21_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_21_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_21_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_21_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_21_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_21_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_22_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_22_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_22_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_22_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_22_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_22_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_22_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_22_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_23_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_23_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_23_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_23_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_23_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_23_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_23_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_23_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_24_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_24_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_24_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_24_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_24_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_24_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_24_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_24_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_25_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_25_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_25_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_25_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_25_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_25_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_25_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_25_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_26_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_26_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_26_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_26_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_26_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_26_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_26_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_26_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_27_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_27_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_27_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_27_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_27_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_27_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_27_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_27_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_28_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_28_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_28_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_28_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_28_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_28_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_28_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_28_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_29_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_29_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_29_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_29_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_29_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_29_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_29_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_29_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_30_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_30_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_30_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_30_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_30_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_30_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_30_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_30_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_31_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_31_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_31_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_31_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_31_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_31_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_31_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_31_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_ID_WIDTH-1 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_1_AWREADY : IN STD_LOGIC;
    m_axi_gmem_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_WVALID : OUT STD_LOGIC;
    m_axi_gmem_1_WREADY : IN STD_LOGIC;
    m_axi_gmem_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_1_WLAST : OUT STD_LOGIC;
    m_axi_gmem_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_1_ARREADY : IN STD_LOGIC;
    m_axi_gmem_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_RVALID : IN STD_LOGIC;
    m_axi_gmem_1_RREADY : OUT STD_LOGIC;
    m_axi_gmem_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem_1_RLAST : IN STD_LOGIC;
    m_axi_gmem_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_BVALID : IN STD_LOGIC;
    m_axi_gmem_1_BREADY : OUT STD_LOGIC;
    m_axi_gmem_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_ID_WIDTH-1 downto 0);
    m_axi_gmem_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_2_AWREADY : IN STD_LOGIC;
    m_axi_gmem_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ID_WIDTH-1 downto 0);
    m_axi_gmem_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_2_WVALID : OUT STD_LOGIC;
    m_axi_gmem_2_WREADY : IN STD_LOGIC;
    m_axi_gmem_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_2_WLAST : OUT STD_LOGIC;
    m_axi_gmem_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ID_WIDTH-1 downto 0);
    m_axi_gmem_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_2_ARREADY : IN STD_LOGIC;
    m_axi_gmem_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ID_WIDTH-1 downto 0);
    m_axi_gmem_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_2_RVALID : IN STD_LOGIC;
    m_axi_gmem_2_RREADY : OUT STD_LOGIC;
    m_axi_gmem_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem_2_RLAST : IN STD_LOGIC;
    m_axi_gmem_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ID_WIDTH-1 downto 0);
    m_axi_gmem_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_2_BVALID : IN STD_LOGIC;
    m_axi_gmem_2_BREADY : OUT STD_LOGIC;
    m_axi_gmem_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_ID_WIDTH-1 downto 0);
    m_axi_gmem_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_3_AWREADY : IN STD_LOGIC;
    m_axi_gmem_3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ID_WIDTH-1 downto 0);
    m_axi_gmem_3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_3_WVALID : OUT STD_LOGIC;
    m_axi_gmem_3_WREADY : IN STD_LOGIC;
    m_axi_gmem_3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_DATA_WIDTH-1 downto 0);
    m_axi_gmem_3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_3_WLAST : OUT STD_LOGIC;
    m_axi_gmem_3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ID_WIDTH-1 downto 0);
    m_axi_gmem_3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_3_ARREADY : IN STD_LOGIC;
    m_axi_gmem_3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ID_WIDTH-1 downto 0);
    m_axi_gmem_3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_3_RVALID : IN STD_LOGIC;
    m_axi_gmem_3_RREADY : OUT STD_LOGIC;
    m_axi_gmem_3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_DATA_WIDTH-1 downto 0);
    m_axi_gmem_3_RLAST : IN STD_LOGIC;
    m_axi_gmem_3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ID_WIDTH-1 downto 0);
    m_axi_gmem_3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_3_BVALID : IN STD_LOGIC;
    m_axi_gmem_3_BREADY : OUT STD_LOGIC;
    m_axi_gmem_3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_ID_WIDTH-1 downto 0);
    m_axi_gmem_3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_4_AWREADY : IN STD_LOGIC;
    m_axi_gmem_4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ID_WIDTH-1 downto 0);
    m_axi_gmem_4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_4_WVALID : OUT STD_LOGIC;
    m_axi_gmem_4_WREADY : IN STD_LOGIC;
    m_axi_gmem_4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_DATA_WIDTH-1 downto 0);
    m_axi_gmem_4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_4_WLAST : OUT STD_LOGIC;
    m_axi_gmem_4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ID_WIDTH-1 downto 0);
    m_axi_gmem_4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_4_ARREADY : IN STD_LOGIC;
    m_axi_gmem_4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ID_WIDTH-1 downto 0);
    m_axi_gmem_4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_4_RVALID : IN STD_LOGIC;
    m_axi_gmem_4_RREADY : OUT STD_LOGIC;
    m_axi_gmem_4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_DATA_WIDTH-1 downto 0);
    m_axi_gmem_4_RLAST : IN STD_LOGIC;
    m_axi_gmem_4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ID_WIDTH-1 downto 0);
    m_axi_gmem_4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_4_BVALID : IN STD_LOGIC;
    m_axi_gmem_4_BREADY : OUT STD_LOGIC;
    m_axi_gmem_4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_ID_WIDTH-1 downto 0);
    m_axi_gmem_4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_4_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_5_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_5_AWREADY : IN STD_LOGIC;
    m_axi_gmem_5_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_5_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ID_WIDTH-1 downto 0);
    m_axi_gmem_5_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_5_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_5_WVALID : OUT STD_LOGIC;
    m_axi_gmem_5_WREADY : IN STD_LOGIC;
    m_axi_gmem_5_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_DATA_WIDTH-1 downto 0);
    m_axi_gmem_5_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_5_WLAST : OUT STD_LOGIC;
    m_axi_gmem_5_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ID_WIDTH-1 downto 0);
    m_axi_gmem_5_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_5_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_5_ARREADY : IN STD_LOGIC;
    m_axi_gmem_5_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_5_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ID_WIDTH-1 downto 0);
    m_axi_gmem_5_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_5_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_5_RVALID : IN STD_LOGIC;
    m_axi_gmem_5_RREADY : OUT STD_LOGIC;
    m_axi_gmem_5_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_DATA_WIDTH-1 downto 0);
    m_axi_gmem_5_RLAST : IN STD_LOGIC;
    m_axi_gmem_5_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ID_WIDTH-1 downto 0);
    m_axi_gmem_5_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_5_BVALID : IN STD_LOGIC;
    m_axi_gmem_5_BREADY : OUT STD_LOGIC;
    m_axi_gmem_5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_5_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_ID_WIDTH-1 downto 0);
    m_axi_gmem_5_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_5_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_6_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_6_AWREADY : IN STD_LOGIC;
    m_axi_gmem_6_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_6_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ID_WIDTH-1 downto 0);
    m_axi_gmem_6_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_6_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_6_WVALID : OUT STD_LOGIC;
    m_axi_gmem_6_WREADY : IN STD_LOGIC;
    m_axi_gmem_6_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_DATA_WIDTH-1 downto 0);
    m_axi_gmem_6_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_6_WLAST : OUT STD_LOGIC;
    m_axi_gmem_6_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ID_WIDTH-1 downto 0);
    m_axi_gmem_6_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_6_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_6_ARREADY : IN STD_LOGIC;
    m_axi_gmem_6_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_6_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ID_WIDTH-1 downto 0);
    m_axi_gmem_6_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_6_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_6_RVALID : IN STD_LOGIC;
    m_axi_gmem_6_RREADY : OUT STD_LOGIC;
    m_axi_gmem_6_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_DATA_WIDTH-1 downto 0);
    m_axi_gmem_6_RLAST : IN STD_LOGIC;
    m_axi_gmem_6_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ID_WIDTH-1 downto 0);
    m_axi_gmem_6_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_6_BVALID : IN STD_LOGIC;
    m_axi_gmem_6_BREADY : OUT STD_LOGIC;
    m_axi_gmem_6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_6_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_ID_WIDTH-1 downto 0);
    m_axi_gmem_6_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_6_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_7_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_7_AWREADY : IN STD_LOGIC;
    m_axi_gmem_7_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_7_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ID_WIDTH-1 downto 0);
    m_axi_gmem_7_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_7_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_7_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_7_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_7_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_7_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_7_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_7_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_7_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_7_WVALID : OUT STD_LOGIC;
    m_axi_gmem_7_WREADY : IN STD_LOGIC;
    m_axi_gmem_7_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_DATA_WIDTH-1 downto 0);
    m_axi_gmem_7_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_7_WLAST : OUT STD_LOGIC;
    m_axi_gmem_7_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ID_WIDTH-1 downto 0);
    m_axi_gmem_7_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_7_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_7_ARREADY : IN STD_LOGIC;
    m_axi_gmem_7_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_7_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ID_WIDTH-1 downto 0);
    m_axi_gmem_7_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_7_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_7_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_7_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_7_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_7_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_7_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_7_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_7_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_7_RVALID : IN STD_LOGIC;
    m_axi_gmem_7_RREADY : OUT STD_LOGIC;
    m_axi_gmem_7_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_DATA_WIDTH-1 downto 0);
    m_axi_gmem_7_RLAST : IN STD_LOGIC;
    m_axi_gmem_7_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ID_WIDTH-1 downto 0);
    m_axi_gmem_7_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_7_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_7_BVALID : IN STD_LOGIC;
    m_axi_gmem_7_BREADY : OUT STD_LOGIC;
    m_axi_gmem_7_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_7_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_ID_WIDTH-1 downto 0);
    m_axi_gmem_7_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_7_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_8_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_8_AWREADY : IN STD_LOGIC;
    m_axi_gmem_8_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_8_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ID_WIDTH-1 downto 0);
    m_axi_gmem_8_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_8_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_8_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_8_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_8_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_8_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_8_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_8_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_8_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_8_WVALID : OUT STD_LOGIC;
    m_axi_gmem_8_WREADY : IN STD_LOGIC;
    m_axi_gmem_8_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_DATA_WIDTH-1 downto 0);
    m_axi_gmem_8_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_8_WLAST : OUT STD_LOGIC;
    m_axi_gmem_8_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ID_WIDTH-1 downto 0);
    m_axi_gmem_8_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_8_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_8_ARREADY : IN STD_LOGIC;
    m_axi_gmem_8_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_8_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ID_WIDTH-1 downto 0);
    m_axi_gmem_8_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_8_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_8_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_8_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_8_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_8_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_8_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_8_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_8_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_8_RVALID : IN STD_LOGIC;
    m_axi_gmem_8_RREADY : OUT STD_LOGIC;
    m_axi_gmem_8_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_DATA_WIDTH-1 downto 0);
    m_axi_gmem_8_RLAST : IN STD_LOGIC;
    m_axi_gmem_8_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ID_WIDTH-1 downto 0);
    m_axi_gmem_8_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_8_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_8_BVALID : IN STD_LOGIC;
    m_axi_gmem_8_BREADY : OUT STD_LOGIC;
    m_axi_gmem_8_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_8_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_ID_WIDTH-1 downto 0);
    m_axi_gmem_8_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_8_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_9_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_9_AWREADY : IN STD_LOGIC;
    m_axi_gmem_9_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_9_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ID_WIDTH-1 downto 0);
    m_axi_gmem_9_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_9_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_9_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_9_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_9_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_9_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_9_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_9_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_9_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_9_WVALID : OUT STD_LOGIC;
    m_axi_gmem_9_WREADY : IN STD_LOGIC;
    m_axi_gmem_9_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_DATA_WIDTH-1 downto 0);
    m_axi_gmem_9_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_9_WLAST : OUT STD_LOGIC;
    m_axi_gmem_9_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ID_WIDTH-1 downto 0);
    m_axi_gmem_9_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_9_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_9_ARREADY : IN STD_LOGIC;
    m_axi_gmem_9_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_9_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ID_WIDTH-1 downto 0);
    m_axi_gmem_9_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_9_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_9_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_9_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_9_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_9_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_9_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_9_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_9_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_9_RVALID : IN STD_LOGIC;
    m_axi_gmem_9_RREADY : OUT STD_LOGIC;
    m_axi_gmem_9_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_DATA_WIDTH-1 downto 0);
    m_axi_gmem_9_RLAST : IN STD_LOGIC;
    m_axi_gmem_9_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ID_WIDTH-1 downto 0);
    m_axi_gmem_9_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_9_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_9_BVALID : IN STD_LOGIC;
    m_axi_gmem_9_BREADY : OUT STD_LOGIC;
    m_axi_gmem_9_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_9_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_ID_WIDTH-1 downto 0);
    m_axi_gmem_9_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_9_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_10_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_10_AWREADY : IN STD_LOGIC;
    m_axi_gmem_10_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_10_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ID_WIDTH-1 downto 0);
    m_axi_gmem_10_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_10_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_10_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_10_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_10_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_10_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_10_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_10_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_10_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_10_WVALID : OUT STD_LOGIC;
    m_axi_gmem_10_WREADY : IN STD_LOGIC;
    m_axi_gmem_10_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_DATA_WIDTH-1 downto 0);
    m_axi_gmem_10_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_10_WLAST : OUT STD_LOGIC;
    m_axi_gmem_10_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ID_WIDTH-1 downto 0);
    m_axi_gmem_10_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_10_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_10_ARREADY : IN STD_LOGIC;
    m_axi_gmem_10_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_10_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ID_WIDTH-1 downto 0);
    m_axi_gmem_10_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_10_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_10_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_10_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_10_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_10_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_10_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_10_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_10_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_10_RVALID : IN STD_LOGIC;
    m_axi_gmem_10_RREADY : OUT STD_LOGIC;
    m_axi_gmem_10_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_DATA_WIDTH-1 downto 0);
    m_axi_gmem_10_RLAST : IN STD_LOGIC;
    m_axi_gmem_10_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ID_WIDTH-1 downto 0);
    m_axi_gmem_10_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_10_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_10_BVALID : IN STD_LOGIC;
    m_axi_gmem_10_BREADY : OUT STD_LOGIC;
    m_axi_gmem_10_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_10_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_ID_WIDTH-1 downto 0);
    m_axi_gmem_10_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_10_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_11_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_11_AWREADY : IN STD_LOGIC;
    m_axi_gmem_11_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_11_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ID_WIDTH-1 downto 0);
    m_axi_gmem_11_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_11_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_11_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_11_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_11_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_11_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_11_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_11_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_11_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_11_WVALID : OUT STD_LOGIC;
    m_axi_gmem_11_WREADY : IN STD_LOGIC;
    m_axi_gmem_11_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_DATA_WIDTH-1 downto 0);
    m_axi_gmem_11_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_11_WLAST : OUT STD_LOGIC;
    m_axi_gmem_11_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ID_WIDTH-1 downto 0);
    m_axi_gmem_11_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_11_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_11_ARREADY : IN STD_LOGIC;
    m_axi_gmem_11_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_11_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ID_WIDTH-1 downto 0);
    m_axi_gmem_11_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_11_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_11_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_11_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_11_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_11_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_11_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_11_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_11_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_11_RVALID : IN STD_LOGIC;
    m_axi_gmem_11_RREADY : OUT STD_LOGIC;
    m_axi_gmem_11_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_DATA_WIDTH-1 downto 0);
    m_axi_gmem_11_RLAST : IN STD_LOGIC;
    m_axi_gmem_11_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ID_WIDTH-1 downto 0);
    m_axi_gmem_11_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_11_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_11_BVALID : IN STD_LOGIC;
    m_axi_gmem_11_BREADY : OUT STD_LOGIC;
    m_axi_gmem_11_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_11_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_ID_WIDTH-1 downto 0);
    m_axi_gmem_11_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_11_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_12_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_12_AWREADY : IN STD_LOGIC;
    m_axi_gmem_12_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_12_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ID_WIDTH-1 downto 0);
    m_axi_gmem_12_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_12_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_12_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_12_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_12_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_12_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_12_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_12_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_12_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_12_WVALID : OUT STD_LOGIC;
    m_axi_gmem_12_WREADY : IN STD_LOGIC;
    m_axi_gmem_12_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_DATA_WIDTH-1 downto 0);
    m_axi_gmem_12_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_12_WLAST : OUT STD_LOGIC;
    m_axi_gmem_12_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ID_WIDTH-1 downto 0);
    m_axi_gmem_12_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_12_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_12_ARREADY : IN STD_LOGIC;
    m_axi_gmem_12_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_12_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ID_WIDTH-1 downto 0);
    m_axi_gmem_12_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_12_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_12_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_12_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_12_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_12_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_12_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_12_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_12_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_12_RVALID : IN STD_LOGIC;
    m_axi_gmem_12_RREADY : OUT STD_LOGIC;
    m_axi_gmem_12_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_DATA_WIDTH-1 downto 0);
    m_axi_gmem_12_RLAST : IN STD_LOGIC;
    m_axi_gmem_12_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ID_WIDTH-1 downto 0);
    m_axi_gmem_12_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_12_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_12_BVALID : IN STD_LOGIC;
    m_axi_gmem_12_BREADY : OUT STD_LOGIC;
    m_axi_gmem_12_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_12_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_ID_WIDTH-1 downto 0);
    m_axi_gmem_12_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_12_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_13_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_13_AWREADY : IN STD_LOGIC;
    m_axi_gmem_13_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_13_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ID_WIDTH-1 downto 0);
    m_axi_gmem_13_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_13_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_13_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_13_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_13_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_13_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_13_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_13_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_13_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_13_WVALID : OUT STD_LOGIC;
    m_axi_gmem_13_WREADY : IN STD_LOGIC;
    m_axi_gmem_13_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_DATA_WIDTH-1 downto 0);
    m_axi_gmem_13_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_13_WLAST : OUT STD_LOGIC;
    m_axi_gmem_13_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ID_WIDTH-1 downto 0);
    m_axi_gmem_13_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_13_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_13_ARREADY : IN STD_LOGIC;
    m_axi_gmem_13_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_13_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ID_WIDTH-1 downto 0);
    m_axi_gmem_13_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_13_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_13_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_13_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_13_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_13_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_13_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_13_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_13_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_13_RVALID : IN STD_LOGIC;
    m_axi_gmem_13_RREADY : OUT STD_LOGIC;
    m_axi_gmem_13_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_DATA_WIDTH-1 downto 0);
    m_axi_gmem_13_RLAST : IN STD_LOGIC;
    m_axi_gmem_13_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ID_WIDTH-1 downto 0);
    m_axi_gmem_13_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_13_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_13_BVALID : IN STD_LOGIC;
    m_axi_gmem_13_BREADY : OUT STD_LOGIC;
    m_axi_gmem_13_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_13_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_ID_WIDTH-1 downto 0);
    m_axi_gmem_13_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_13_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_14_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_14_AWREADY : IN STD_LOGIC;
    m_axi_gmem_14_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_14_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ID_WIDTH-1 downto 0);
    m_axi_gmem_14_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_14_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_14_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_14_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_14_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_14_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_14_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_14_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_14_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_14_WVALID : OUT STD_LOGIC;
    m_axi_gmem_14_WREADY : IN STD_LOGIC;
    m_axi_gmem_14_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_DATA_WIDTH-1 downto 0);
    m_axi_gmem_14_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_14_WLAST : OUT STD_LOGIC;
    m_axi_gmem_14_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ID_WIDTH-1 downto 0);
    m_axi_gmem_14_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_14_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_14_ARREADY : IN STD_LOGIC;
    m_axi_gmem_14_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_14_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ID_WIDTH-1 downto 0);
    m_axi_gmem_14_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_14_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_14_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_14_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_14_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_14_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_14_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_14_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_14_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_14_RVALID : IN STD_LOGIC;
    m_axi_gmem_14_RREADY : OUT STD_LOGIC;
    m_axi_gmem_14_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_DATA_WIDTH-1 downto 0);
    m_axi_gmem_14_RLAST : IN STD_LOGIC;
    m_axi_gmem_14_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ID_WIDTH-1 downto 0);
    m_axi_gmem_14_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_14_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_14_BVALID : IN STD_LOGIC;
    m_axi_gmem_14_BREADY : OUT STD_LOGIC;
    m_axi_gmem_14_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_14_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_ID_WIDTH-1 downto 0);
    m_axi_gmem_14_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_14_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_15_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_15_AWREADY : IN STD_LOGIC;
    m_axi_gmem_15_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_15_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ID_WIDTH-1 downto 0);
    m_axi_gmem_15_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_15_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_15_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_15_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_15_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_15_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_15_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_15_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_15_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_15_WVALID : OUT STD_LOGIC;
    m_axi_gmem_15_WREADY : IN STD_LOGIC;
    m_axi_gmem_15_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_DATA_WIDTH-1 downto 0);
    m_axi_gmem_15_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_15_WLAST : OUT STD_LOGIC;
    m_axi_gmem_15_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ID_WIDTH-1 downto 0);
    m_axi_gmem_15_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_15_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_15_ARREADY : IN STD_LOGIC;
    m_axi_gmem_15_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_15_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ID_WIDTH-1 downto 0);
    m_axi_gmem_15_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_15_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_15_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_15_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_15_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_15_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_15_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_15_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_15_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_15_RVALID : IN STD_LOGIC;
    m_axi_gmem_15_RREADY : OUT STD_LOGIC;
    m_axi_gmem_15_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_DATA_WIDTH-1 downto 0);
    m_axi_gmem_15_RLAST : IN STD_LOGIC;
    m_axi_gmem_15_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ID_WIDTH-1 downto 0);
    m_axi_gmem_15_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_15_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_15_BVALID : IN STD_LOGIC;
    m_axi_gmem_15_BREADY : OUT STD_LOGIC;
    m_axi_gmem_15_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_15_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_ID_WIDTH-1 downto 0);
    m_axi_gmem_15_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_15_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_16_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_16_AWREADY : IN STD_LOGIC;
    m_axi_gmem_16_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_16_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ID_WIDTH-1 downto 0);
    m_axi_gmem_16_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_16_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_16_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_16_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_16_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_16_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_16_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_16_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_16_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_16_WVALID : OUT STD_LOGIC;
    m_axi_gmem_16_WREADY : IN STD_LOGIC;
    m_axi_gmem_16_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_DATA_WIDTH-1 downto 0);
    m_axi_gmem_16_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_16_WLAST : OUT STD_LOGIC;
    m_axi_gmem_16_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ID_WIDTH-1 downto 0);
    m_axi_gmem_16_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_16_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_16_ARREADY : IN STD_LOGIC;
    m_axi_gmem_16_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_16_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ID_WIDTH-1 downto 0);
    m_axi_gmem_16_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_16_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_16_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_16_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_16_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_16_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_16_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_16_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_16_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_16_RVALID : IN STD_LOGIC;
    m_axi_gmem_16_RREADY : OUT STD_LOGIC;
    m_axi_gmem_16_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_DATA_WIDTH-1 downto 0);
    m_axi_gmem_16_RLAST : IN STD_LOGIC;
    m_axi_gmem_16_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ID_WIDTH-1 downto 0);
    m_axi_gmem_16_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_16_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_16_BVALID : IN STD_LOGIC;
    m_axi_gmem_16_BREADY : OUT STD_LOGIC;
    m_axi_gmem_16_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_16_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_ID_WIDTH-1 downto 0);
    m_axi_gmem_16_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_16_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_17_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_17_AWREADY : IN STD_LOGIC;
    m_axi_gmem_17_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_17_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ID_WIDTH-1 downto 0);
    m_axi_gmem_17_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_17_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_17_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_17_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_17_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_17_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_17_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_17_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_17_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_17_WVALID : OUT STD_LOGIC;
    m_axi_gmem_17_WREADY : IN STD_LOGIC;
    m_axi_gmem_17_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_DATA_WIDTH-1 downto 0);
    m_axi_gmem_17_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_17_WLAST : OUT STD_LOGIC;
    m_axi_gmem_17_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ID_WIDTH-1 downto 0);
    m_axi_gmem_17_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_17_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_17_ARREADY : IN STD_LOGIC;
    m_axi_gmem_17_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_17_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ID_WIDTH-1 downto 0);
    m_axi_gmem_17_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_17_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_17_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_17_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_17_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_17_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_17_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_17_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_17_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_17_RVALID : IN STD_LOGIC;
    m_axi_gmem_17_RREADY : OUT STD_LOGIC;
    m_axi_gmem_17_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_DATA_WIDTH-1 downto 0);
    m_axi_gmem_17_RLAST : IN STD_LOGIC;
    m_axi_gmem_17_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ID_WIDTH-1 downto 0);
    m_axi_gmem_17_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_17_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_17_BVALID : IN STD_LOGIC;
    m_axi_gmem_17_BREADY : OUT STD_LOGIC;
    m_axi_gmem_17_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_17_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_ID_WIDTH-1 downto 0);
    m_axi_gmem_17_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_17_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_18_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_18_AWREADY : IN STD_LOGIC;
    m_axi_gmem_18_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_18_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ID_WIDTH-1 downto 0);
    m_axi_gmem_18_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_18_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_18_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_18_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_18_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_18_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_18_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_18_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_18_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_18_WVALID : OUT STD_LOGIC;
    m_axi_gmem_18_WREADY : IN STD_LOGIC;
    m_axi_gmem_18_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_DATA_WIDTH-1 downto 0);
    m_axi_gmem_18_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_18_WLAST : OUT STD_LOGIC;
    m_axi_gmem_18_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ID_WIDTH-1 downto 0);
    m_axi_gmem_18_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_18_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_18_ARREADY : IN STD_LOGIC;
    m_axi_gmem_18_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_18_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ID_WIDTH-1 downto 0);
    m_axi_gmem_18_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_18_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_18_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_18_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_18_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_18_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_18_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_18_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_18_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_18_RVALID : IN STD_LOGIC;
    m_axi_gmem_18_RREADY : OUT STD_LOGIC;
    m_axi_gmem_18_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_DATA_WIDTH-1 downto 0);
    m_axi_gmem_18_RLAST : IN STD_LOGIC;
    m_axi_gmem_18_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ID_WIDTH-1 downto 0);
    m_axi_gmem_18_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_18_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_18_BVALID : IN STD_LOGIC;
    m_axi_gmem_18_BREADY : OUT STD_LOGIC;
    m_axi_gmem_18_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_18_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_ID_WIDTH-1 downto 0);
    m_axi_gmem_18_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_18_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_19_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_19_AWREADY : IN STD_LOGIC;
    m_axi_gmem_19_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_19_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ID_WIDTH-1 downto 0);
    m_axi_gmem_19_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_19_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_19_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_19_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_19_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_19_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_19_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_19_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_19_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_19_WVALID : OUT STD_LOGIC;
    m_axi_gmem_19_WREADY : IN STD_LOGIC;
    m_axi_gmem_19_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_DATA_WIDTH-1 downto 0);
    m_axi_gmem_19_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_19_WLAST : OUT STD_LOGIC;
    m_axi_gmem_19_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ID_WIDTH-1 downto 0);
    m_axi_gmem_19_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_19_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_19_ARREADY : IN STD_LOGIC;
    m_axi_gmem_19_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_19_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ID_WIDTH-1 downto 0);
    m_axi_gmem_19_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_19_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_19_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_19_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_19_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_19_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_19_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_19_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_19_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_19_RVALID : IN STD_LOGIC;
    m_axi_gmem_19_RREADY : OUT STD_LOGIC;
    m_axi_gmem_19_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_DATA_WIDTH-1 downto 0);
    m_axi_gmem_19_RLAST : IN STD_LOGIC;
    m_axi_gmem_19_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ID_WIDTH-1 downto 0);
    m_axi_gmem_19_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_19_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_19_BVALID : IN STD_LOGIC;
    m_axi_gmem_19_BREADY : OUT STD_LOGIC;
    m_axi_gmem_19_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_19_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_ID_WIDTH-1 downto 0);
    m_axi_gmem_19_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_19_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_20_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_20_AWREADY : IN STD_LOGIC;
    m_axi_gmem_20_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_20_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ID_WIDTH-1 downto 0);
    m_axi_gmem_20_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_20_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_20_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_20_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_20_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_20_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_20_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_20_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_20_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_20_WVALID : OUT STD_LOGIC;
    m_axi_gmem_20_WREADY : IN STD_LOGIC;
    m_axi_gmem_20_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_DATA_WIDTH-1 downto 0);
    m_axi_gmem_20_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_20_WLAST : OUT STD_LOGIC;
    m_axi_gmem_20_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ID_WIDTH-1 downto 0);
    m_axi_gmem_20_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_20_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_20_ARREADY : IN STD_LOGIC;
    m_axi_gmem_20_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_20_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ID_WIDTH-1 downto 0);
    m_axi_gmem_20_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_20_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_20_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_20_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_20_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_20_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_20_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_20_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_20_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_20_RVALID : IN STD_LOGIC;
    m_axi_gmem_20_RREADY : OUT STD_LOGIC;
    m_axi_gmem_20_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_DATA_WIDTH-1 downto 0);
    m_axi_gmem_20_RLAST : IN STD_LOGIC;
    m_axi_gmem_20_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ID_WIDTH-1 downto 0);
    m_axi_gmem_20_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_20_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_20_BVALID : IN STD_LOGIC;
    m_axi_gmem_20_BREADY : OUT STD_LOGIC;
    m_axi_gmem_20_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_20_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_ID_WIDTH-1 downto 0);
    m_axi_gmem_20_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_20_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_21_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_21_AWREADY : IN STD_LOGIC;
    m_axi_gmem_21_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_21_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ID_WIDTH-1 downto 0);
    m_axi_gmem_21_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_21_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_21_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_21_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_21_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_21_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_21_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_21_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_21_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_21_WVALID : OUT STD_LOGIC;
    m_axi_gmem_21_WREADY : IN STD_LOGIC;
    m_axi_gmem_21_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_DATA_WIDTH-1 downto 0);
    m_axi_gmem_21_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_21_WLAST : OUT STD_LOGIC;
    m_axi_gmem_21_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ID_WIDTH-1 downto 0);
    m_axi_gmem_21_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_21_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_21_ARREADY : IN STD_LOGIC;
    m_axi_gmem_21_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_21_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ID_WIDTH-1 downto 0);
    m_axi_gmem_21_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_21_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_21_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_21_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_21_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_21_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_21_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_21_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_21_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_21_RVALID : IN STD_LOGIC;
    m_axi_gmem_21_RREADY : OUT STD_LOGIC;
    m_axi_gmem_21_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_DATA_WIDTH-1 downto 0);
    m_axi_gmem_21_RLAST : IN STD_LOGIC;
    m_axi_gmem_21_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ID_WIDTH-1 downto 0);
    m_axi_gmem_21_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_21_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_21_BVALID : IN STD_LOGIC;
    m_axi_gmem_21_BREADY : OUT STD_LOGIC;
    m_axi_gmem_21_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_21_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_ID_WIDTH-1 downto 0);
    m_axi_gmem_21_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_21_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_22_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_22_AWREADY : IN STD_LOGIC;
    m_axi_gmem_22_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_22_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ID_WIDTH-1 downto 0);
    m_axi_gmem_22_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_22_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_22_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_22_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_22_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_22_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_22_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_22_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_22_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_22_WVALID : OUT STD_LOGIC;
    m_axi_gmem_22_WREADY : IN STD_LOGIC;
    m_axi_gmem_22_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_DATA_WIDTH-1 downto 0);
    m_axi_gmem_22_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_22_WLAST : OUT STD_LOGIC;
    m_axi_gmem_22_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ID_WIDTH-1 downto 0);
    m_axi_gmem_22_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_22_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_22_ARREADY : IN STD_LOGIC;
    m_axi_gmem_22_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_22_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ID_WIDTH-1 downto 0);
    m_axi_gmem_22_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_22_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_22_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_22_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_22_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_22_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_22_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_22_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_22_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_22_RVALID : IN STD_LOGIC;
    m_axi_gmem_22_RREADY : OUT STD_LOGIC;
    m_axi_gmem_22_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_DATA_WIDTH-1 downto 0);
    m_axi_gmem_22_RLAST : IN STD_LOGIC;
    m_axi_gmem_22_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ID_WIDTH-1 downto 0);
    m_axi_gmem_22_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_22_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_22_BVALID : IN STD_LOGIC;
    m_axi_gmem_22_BREADY : OUT STD_LOGIC;
    m_axi_gmem_22_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_22_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_ID_WIDTH-1 downto 0);
    m_axi_gmem_22_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_22_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_23_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_23_AWREADY : IN STD_LOGIC;
    m_axi_gmem_23_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_23_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ID_WIDTH-1 downto 0);
    m_axi_gmem_23_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_23_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_23_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_23_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_23_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_23_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_23_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_23_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_23_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_23_WVALID : OUT STD_LOGIC;
    m_axi_gmem_23_WREADY : IN STD_LOGIC;
    m_axi_gmem_23_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_DATA_WIDTH-1 downto 0);
    m_axi_gmem_23_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_23_WLAST : OUT STD_LOGIC;
    m_axi_gmem_23_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ID_WIDTH-1 downto 0);
    m_axi_gmem_23_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_23_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_23_ARREADY : IN STD_LOGIC;
    m_axi_gmem_23_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_23_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ID_WIDTH-1 downto 0);
    m_axi_gmem_23_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_23_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_23_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_23_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_23_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_23_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_23_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_23_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_23_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_23_RVALID : IN STD_LOGIC;
    m_axi_gmem_23_RREADY : OUT STD_LOGIC;
    m_axi_gmem_23_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_DATA_WIDTH-1 downto 0);
    m_axi_gmem_23_RLAST : IN STD_LOGIC;
    m_axi_gmem_23_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ID_WIDTH-1 downto 0);
    m_axi_gmem_23_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_23_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_23_BVALID : IN STD_LOGIC;
    m_axi_gmem_23_BREADY : OUT STD_LOGIC;
    m_axi_gmem_23_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_23_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_ID_WIDTH-1 downto 0);
    m_axi_gmem_23_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_23_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_24_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_24_AWREADY : IN STD_LOGIC;
    m_axi_gmem_24_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_24_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ID_WIDTH-1 downto 0);
    m_axi_gmem_24_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_24_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_24_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_24_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_24_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_24_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_24_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_24_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_24_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_24_WVALID : OUT STD_LOGIC;
    m_axi_gmem_24_WREADY : IN STD_LOGIC;
    m_axi_gmem_24_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_DATA_WIDTH-1 downto 0);
    m_axi_gmem_24_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_24_WLAST : OUT STD_LOGIC;
    m_axi_gmem_24_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ID_WIDTH-1 downto 0);
    m_axi_gmem_24_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_24_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_24_ARREADY : IN STD_LOGIC;
    m_axi_gmem_24_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_24_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ID_WIDTH-1 downto 0);
    m_axi_gmem_24_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_24_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_24_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_24_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_24_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_24_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_24_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_24_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_24_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_24_RVALID : IN STD_LOGIC;
    m_axi_gmem_24_RREADY : OUT STD_LOGIC;
    m_axi_gmem_24_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_DATA_WIDTH-1 downto 0);
    m_axi_gmem_24_RLAST : IN STD_LOGIC;
    m_axi_gmem_24_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ID_WIDTH-1 downto 0);
    m_axi_gmem_24_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_24_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_24_BVALID : IN STD_LOGIC;
    m_axi_gmem_24_BREADY : OUT STD_LOGIC;
    m_axi_gmem_24_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_24_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_ID_WIDTH-1 downto 0);
    m_axi_gmem_24_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_24_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_25_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_25_AWREADY : IN STD_LOGIC;
    m_axi_gmem_25_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_25_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ID_WIDTH-1 downto 0);
    m_axi_gmem_25_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_25_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_25_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_25_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_25_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_25_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_25_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_25_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_25_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_25_WVALID : OUT STD_LOGIC;
    m_axi_gmem_25_WREADY : IN STD_LOGIC;
    m_axi_gmem_25_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_DATA_WIDTH-1 downto 0);
    m_axi_gmem_25_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_25_WLAST : OUT STD_LOGIC;
    m_axi_gmem_25_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ID_WIDTH-1 downto 0);
    m_axi_gmem_25_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_25_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_25_ARREADY : IN STD_LOGIC;
    m_axi_gmem_25_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_25_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ID_WIDTH-1 downto 0);
    m_axi_gmem_25_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_25_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_25_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_25_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_25_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_25_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_25_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_25_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_25_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_25_RVALID : IN STD_LOGIC;
    m_axi_gmem_25_RREADY : OUT STD_LOGIC;
    m_axi_gmem_25_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_DATA_WIDTH-1 downto 0);
    m_axi_gmem_25_RLAST : IN STD_LOGIC;
    m_axi_gmem_25_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ID_WIDTH-1 downto 0);
    m_axi_gmem_25_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_25_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_25_BVALID : IN STD_LOGIC;
    m_axi_gmem_25_BREADY : OUT STD_LOGIC;
    m_axi_gmem_25_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_25_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_ID_WIDTH-1 downto 0);
    m_axi_gmem_25_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_25_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_26_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_26_AWREADY : IN STD_LOGIC;
    m_axi_gmem_26_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_26_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ID_WIDTH-1 downto 0);
    m_axi_gmem_26_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_26_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_26_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_26_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_26_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_26_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_26_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_26_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_26_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_26_WVALID : OUT STD_LOGIC;
    m_axi_gmem_26_WREADY : IN STD_LOGIC;
    m_axi_gmem_26_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_DATA_WIDTH-1 downto 0);
    m_axi_gmem_26_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_26_WLAST : OUT STD_LOGIC;
    m_axi_gmem_26_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ID_WIDTH-1 downto 0);
    m_axi_gmem_26_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_26_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_26_ARREADY : IN STD_LOGIC;
    m_axi_gmem_26_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_26_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ID_WIDTH-1 downto 0);
    m_axi_gmem_26_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_26_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_26_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_26_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_26_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_26_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_26_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_26_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_26_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_26_RVALID : IN STD_LOGIC;
    m_axi_gmem_26_RREADY : OUT STD_LOGIC;
    m_axi_gmem_26_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_DATA_WIDTH-1 downto 0);
    m_axi_gmem_26_RLAST : IN STD_LOGIC;
    m_axi_gmem_26_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ID_WIDTH-1 downto 0);
    m_axi_gmem_26_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_26_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_26_BVALID : IN STD_LOGIC;
    m_axi_gmem_26_BREADY : OUT STD_LOGIC;
    m_axi_gmem_26_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_26_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_ID_WIDTH-1 downto 0);
    m_axi_gmem_26_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_26_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_27_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_27_AWREADY : IN STD_LOGIC;
    m_axi_gmem_27_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_27_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ID_WIDTH-1 downto 0);
    m_axi_gmem_27_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_27_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_27_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_27_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_27_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_27_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_27_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_27_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_27_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_27_WVALID : OUT STD_LOGIC;
    m_axi_gmem_27_WREADY : IN STD_LOGIC;
    m_axi_gmem_27_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_DATA_WIDTH-1 downto 0);
    m_axi_gmem_27_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_27_WLAST : OUT STD_LOGIC;
    m_axi_gmem_27_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ID_WIDTH-1 downto 0);
    m_axi_gmem_27_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_27_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_27_ARREADY : IN STD_LOGIC;
    m_axi_gmem_27_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_27_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ID_WIDTH-1 downto 0);
    m_axi_gmem_27_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_27_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_27_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_27_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_27_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_27_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_27_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_27_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_27_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_27_RVALID : IN STD_LOGIC;
    m_axi_gmem_27_RREADY : OUT STD_LOGIC;
    m_axi_gmem_27_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_DATA_WIDTH-1 downto 0);
    m_axi_gmem_27_RLAST : IN STD_LOGIC;
    m_axi_gmem_27_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ID_WIDTH-1 downto 0);
    m_axi_gmem_27_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_27_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_27_BVALID : IN STD_LOGIC;
    m_axi_gmem_27_BREADY : OUT STD_LOGIC;
    m_axi_gmem_27_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_27_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_ID_WIDTH-1 downto 0);
    m_axi_gmem_27_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_27_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_28_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_28_AWREADY : IN STD_LOGIC;
    m_axi_gmem_28_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_28_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ID_WIDTH-1 downto 0);
    m_axi_gmem_28_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_28_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_28_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_28_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_28_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_28_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_28_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_28_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_28_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_28_WVALID : OUT STD_LOGIC;
    m_axi_gmem_28_WREADY : IN STD_LOGIC;
    m_axi_gmem_28_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_DATA_WIDTH-1 downto 0);
    m_axi_gmem_28_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_28_WLAST : OUT STD_LOGIC;
    m_axi_gmem_28_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ID_WIDTH-1 downto 0);
    m_axi_gmem_28_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_28_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_28_ARREADY : IN STD_LOGIC;
    m_axi_gmem_28_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_28_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ID_WIDTH-1 downto 0);
    m_axi_gmem_28_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_28_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_28_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_28_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_28_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_28_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_28_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_28_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_28_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_28_RVALID : IN STD_LOGIC;
    m_axi_gmem_28_RREADY : OUT STD_LOGIC;
    m_axi_gmem_28_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_DATA_WIDTH-1 downto 0);
    m_axi_gmem_28_RLAST : IN STD_LOGIC;
    m_axi_gmem_28_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ID_WIDTH-1 downto 0);
    m_axi_gmem_28_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_28_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_28_BVALID : IN STD_LOGIC;
    m_axi_gmem_28_BREADY : OUT STD_LOGIC;
    m_axi_gmem_28_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_28_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_ID_WIDTH-1 downto 0);
    m_axi_gmem_28_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_28_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_29_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_29_AWREADY : IN STD_LOGIC;
    m_axi_gmem_29_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_29_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ID_WIDTH-1 downto 0);
    m_axi_gmem_29_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_29_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_29_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_29_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_29_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_29_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_29_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_29_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_29_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_29_WVALID : OUT STD_LOGIC;
    m_axi_gmem_29_WREADY : IN STD_LOGIC;
    m_axi_gmem_29_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_DATA_WIDTH-1 downto 0);
    m_axi_gmem_29_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_29_WLAST : OUT STD_LOGIC;
    m_axi_gmem_29_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ID_WIDTH-1 downto 0);
    m_axi_gmem_29_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_29_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_29_ARREADY : IN STD_LOGIC;
    m_axi_gmem_29_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_29_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ID_WIDTH-1 downto 0);
    m_axi_gmem_29_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_29_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_29_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_29_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_29_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_29_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_29_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_29_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_29_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_29_RVALID : IN STD_LOGIC;
    m_axi_gmem_29_RREADY : OUT STD_LOGIC;
    m_axi_gmem_29_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_DATA_WIDTH-1 downto 0);
    m_axi_gmem_29_RLAST : IN STD_LOGIC;
    m_axi_gmem_29_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ID_WIDTH-1 downto 0);
    m_axi_gmem_29_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_29_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_29_BVALID : IN STD_LOGIC;
    m_axi_gmem_29_BREADY : OUT STD_LOGIC;
    m_axi_gmem_29_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_29_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_ID_WIDTH-1 downto 0);
    m_axi_gmem_29_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_29_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_30_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_30_AWREADY : IN STD_LOGIC;
    m_axi_gmem_30_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_30_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ID_WIDTH-1 downto 0);
    m_axi_gmem_30_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_30_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_30_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_30_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_30_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_30_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_30_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_30_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_30_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_30_WVALID : OUT STD_LOGIC;
    m_axi_gmem_30_WREADY : IN STD_LOGIC;
    m_axi_gmem_30_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_DATA_WIDTH-1 downto 0);
    m_axi_gmem_30_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_30_WLAST : OUT STD_LOGIC;
    m_axi_gmem_30_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ID_WIDTH-1 downto 0);
    m_axi_gmem_30_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_30_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_30_ARREADY : IN STD_LOGIC;
    m_axi_gmem_30_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_30_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ID_WIDTH-1 downto 0);
    m_axi_gmem_30_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_30_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_30_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_30_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_30_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_30_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_30_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_30_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_30_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_30_RVALID : IN STD_LOGIC;
    m_axi_gmem_30_RREADY : OUT STD_LOGIC;
    m_axi_gmem_30_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_DATA_WIDTH-1 downto 0);
    m_axi_gmem_30_RLAST : IN STD_LOGIC;
    m_axi_gmem_30_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ID_WIDTH-1 downto 0);
    m_axi_gmem_30_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_30_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_30_BVALID : IN STD_LOGIC;
    m_axi_gmem_30_BREADY : OUT STD_LOGIC;
    m_axi_gmem_30_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_30_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_ID_WIDTH-1 downto 0);
    m_axi_gmem_30_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_30_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_31_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_31_AWREADY : IN STD_LOGIC;
    m_axi_gmem_31_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_31_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ID_WIDTH-1 downto 0);
    m_axi_gmem_31_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_31_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_31_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_31_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_31_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_31_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_31_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_31_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_31_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_31_WVALID : OUT STD_LOGIC;
    m_axi_gmem_31_WREADY : IN STD_LOGIC;
    m_axi_gmem_31_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_DATA_WIDTH-1 downto 0);
    m_axi_gmem_31_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_31_WLAST : OUT STD_LOGIC;
    m_axi_gmem_31_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ID_WIDTH-1 downto 0);
    m_axi_gmem_31_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_31_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_31_ARREADY : IN STD_LOGIC;
    m_axi_gmem_31_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_31_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ID_WIDTH-1 downto 0);
    m_axi_gmem_31_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_31_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_31_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_31_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_31_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_31_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_31_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_31_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_31_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_31_RVALID : IN STD_LOGIC;
    m_axi_gmem_31_RREADY : OUT STD_LOGIC;
    m_axi_gmem_31_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_DATA_WIDTH-1 downto 0);
    m_axi_gmem_31_RLAST : IN STD_LOGIC;
    m_axi_gmem_31_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ID_WIDTH-1 downto 0);
    m_axi_gmem_31_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_31_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_31_BVALID : IN STD_LOGIC;
    m_axi_gmem_31_BREADY : OUT STD_LOGIC;
    m_axi_gmem_31_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_31_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_ID_WIDTH-1 downto 0);
    m_axi_gmem_31_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_31_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of seq_align_multiple_static is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "seq_align_multiple_static_seq_align_multiple_static,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.230375,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=47,HLS_SYN_DSP=0,HLS_SYN_FF=74565,HLS_SYN_LUT=117501,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_GMEM_1_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_1_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_1_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_10_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_10_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_10_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_11_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_11_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_11_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_12_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_12_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_12_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_13_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_13_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_13_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_14_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_14_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_14_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_15_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_15_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_15_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_16_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_16_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_16_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_17_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_17_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_17_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_18_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_18_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_18_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_19_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_19_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_19_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_2_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_2_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_2_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_20_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_20_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_20_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_21_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_21_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_21_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_22_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_22_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_22_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_23_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_23_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_23_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_24_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_24_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_24_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_25_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_25_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_25_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_26_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_26_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_26_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_27_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_27_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_27_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_28_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_28_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_28_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_29_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_29_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_29_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_3_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_3_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_3_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_30_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_30_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_30_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_31_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_31_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_31_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_4_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_4_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_4_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_5_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_5_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_5_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_6_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_6_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_6_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_7_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_7_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_7_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_8_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_8_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_8_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM_9_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_9_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_9_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal querys_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_17 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_18 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_19 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_20 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_21 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_22 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_23 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_24 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_25 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_26 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_27 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_28 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_29 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_30 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_31 : STD_LOGIC_VECTOR (63 downto 0);
    signal references : STD_LOGIC_VECTOR (63 downto 0);
    signal query_lengths : STD_LOGIC_VECTOR (63 downto 0);
    signal reference_lengths : STD_LOGIC_VECTOR (63 downto 0);
    signal penalties : STD_LOGIC_VECTOR (63 downto 0);
    signal tb_streams : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal gmem_addr_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal gmem_addr_1_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal tb_streams_read_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal references_read_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal querys_0_read_reg_523 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_read_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp7_reg_543 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_548 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_553 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_AlignStatic_fu_404_ap_start : STD_LOGIC;
    signal grp_AlignStatic_fu_404_ap_done : STD_LOGIC;
    signal grp_AlignStatic_fu_404_ap_idle : STD_LOGIC;
    signal grp_AlignStatic_fu_404_ap_ready : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AlignStatic_fu_404_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_AlignStatic_fu_404_m_axi_gmem_BREADY : STD_LOGIC;
    signal gmem_0_AWREADY : STD_LOGIC;
    signal gmem_0_WREADY : STD_LOGIC;
    signal gmem_0_ARVALID : STD_LOGIC;
    signal gmem_0_ARREADY : STD_LOGIC;
    signal gmem_0_RVALID : STD_LOGIC;
    signal gmem_0_RREADY : STD_LOGIC;
    signal gmem_0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem_0_BVALID : STD_LOGIC;
    signal grp_AlignStatic_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal sext_ln48_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_423_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_fu_443_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component seq_align_multiple_static_AlignStatic IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        query : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        reference : IN STD_LOGIC_VECTOR (63 downto 0);
        query_length : IN STD_LOGIC_VECTOR (31 downto 0);
        reference_length : IN STD_LOGIC_VECTOR (31 downto 0);
        penalties_open_val : IN STD_LOGIC_VECTOR (15 downto 0);
        penalties_extend_val : IN STD_LOGIC_VECTOR (15 downto 0);
        penalties_mismatch_val : IN STD_LOGIC_VECTOR (15 downto 0);
        penalties_match_val : IN STD_LOGIC_VECTOR (15 downto 0);
        tb_out : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component seq_align_multiple_static_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        querys_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_18 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_19 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_20 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_21 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_22 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_23 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_24 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_25 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_26 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_27 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_28 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_29 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_30 : OUT STD_LOGIC_VECTOR (63 downto 0);
        querys_31 : OUT STD_LOGIC_VECTOR (63 downto 0);
        references : OUT STD_LOGIC_VECTOR (63 downto 0);
        query_lengths : OUT STD_LOGIC_VECTOR (63 downto 0);
        reference_lengths : OUT STD_LOGIC_VECTOR (63 downto 0);
        penalties : OUT STD_LOGIC_VECTOR (63 downto 0);
        tb_streams : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component seq_align_multiple_static_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component seq_align_multiple_static_gmem_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_AlignStatic_fu_404 : component seq_align_multiple_static_AlignStatic
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AlignStatic_fu_404_ap_start,
        ap_done => grp_AlignStatic_fu_404_ap_done,
        ap_idle => grp_AlignStatic_fu_404_ap_idle,
        ap_ready => grp_AlignStatic_fu_404_ap_ready,
        m_axi_gmem_0_AWVALID => grp_AlignStatic_fu_404_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => grp_AlignStatic_fu_404_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => grp_AlignStatic_fu_404_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => grp_AlignStatic_fu_404_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => grp_AlignStatic_fu_404_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => grp_AlignStatic_fu_404_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => grp_AlignStatic_fu_404_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => grp_AlignStatic_fu_404_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => grp_AlignStatic_fu_404_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => grp_AlignStatic_fu_404_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => grp_AlignStatic_fu_404_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => grp_AlignStatic_fu_404_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => grp_AlignStatic_fu_404_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => grp_AlignStatic_fu_404_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => grp_AlignStatic_fu_404_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => grp_AlignStatic_fu_404_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => grp_AlignStatic_fu_404_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => grp_AlignStatic_fu_404_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => grp_AlignStatic_fu_404_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => grp_AlignStatic_fu_404_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => grp_AlignStatic_fu_404_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => grp_AlignStatic_fu_404_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => grp_AlignStatic_fu_404_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => grp_AlignStatic_fu_404_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => grp_AlignStatic_fu_404_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => grp_AlignStatic_fu_404_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => grp_AlignStatic_fu_404_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => grp_AlignStatic_fu_404_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => grp_AlignStatic_fu_404_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => grp_AlignStatic_fu_404_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => gmem_0_RVALID,
        m_axi_gmem_0_RREADY => grp_AlignStatic_fu_404_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => gmem_0_RDATA,
        m_axi_gmem_0_RLAST => ap_const_logic_0,
        m_axi_gmem_0_RID => ap_const_lv1_0,
        m_axi_gmem_0_RFIFONUM => gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => ap_const_lv1_0,
        m_axi_gmem_0_RRESP => ap_const_lv2_0,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => grp_AlignStatic_fu_404_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        query => querys_0_read_reg_523,
        m_axi_gmem_AWVALID => grp_AlignStatic_fu_404_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_AlignStatic_fu_404_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_AlignStatic_fu_404_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_AlignStatic_fu_404_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_AlignStatic_fu_404_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_AlignStatic_fu_404_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_AlignStatic_fu_404_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_AlignStatic_fu_404_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_AlignStatic_fu_404_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_AlignStatic_fu_404_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_AlignStatic_fu_404_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_AlignStatic_fu_404_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_AlignStatic_fu_404_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_AlignStatic_fu_404_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_AlignStatic_fu_404_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_AlignStatic_fu_404_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_AlignStatic_fu_404_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_AlignStatic_fu_404_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_AlignStatic_fu_404_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_AlignStatic_fu_404_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_AlignStatic_fu_404_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_AlignStatic_fu_404_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_AlignStatic_fu_404_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_AlignStatic_fu_404_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_AlignStatic_fu_404_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_AlignStatic_fu_404_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_AlignStatic_fu_404_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_AlignStatic_fu_404_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_AlignStatic_fu_404_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_AlignStatic_fu_404_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_AlignStatic_fu_404_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_AlignStatic_fu_404_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        reference => references_read_reg_518,
        query_length => gmem_addr_read_reg_528,
        reference_length => gmem_addr_1_read_reg_533,
        penalties_open_val => empty_reg_538,
        penalties_extend_val => tmp7_reg_543,
        penalties_mismatch_val => tmp_s_reg_548,
        penalties_match_val => tmp_1_reg_553,
        tb_out => tb_streams_read_reg_513);

    control_s_axi_U : component seq_align_multiple_static_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        querys_0 => querys_0,
        querys_1 => querys_1,
        querys_2 => querys_2,
        querys_3 => querys_3,
        querys_4 => querys_4,
        querys_5 => querys_5,
        querys_6 => querys_6,
        querys_7 => querys_7,
        querys_8 => querys_8,
        querys_9 => querys_9,
        querys_10 => querys_10,
        querys_11 => querys_11,
        querys_12 => querys_12,
        querys_13 => querys_13,
        querys_14 => querys_14,
        querys_15 => querys_15,
        querys_16 => querys_16,
        querys_17 => querys_17,
        querys_18 => querys_18,
        querys_19 => querys_19,
        querys_20 => querys_20,
        querys_21 => querys_21,
        querys_22 => querys_22,
        querys_23 => querys_23,
        querys_24 => querys_24,
        querys_25 => querys_25,
        querys_26 => querys_26,
        querys_27 => querys_27,
        querys_28 => querys_28,
        querys_29 => querys_29,
        querys_30 => querys_30,
        querys_31 => querys_31,
        references => references,
        query_lengths => query_lengths,
        reference_lengths => reference_lengths,
        penalties => penalties,
        tb_streams => tb_streams,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component seq_align_multiple_static_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_AlignStatic_fu_404_m_axi_gmem_AWADDR,
        I_AWLEN => grp_AlignStatic_fu_404_m_axi_gmem_AWLEN,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_AlignStatic_fu_404_m_axi_gmem_WDATA,
        I_WSTRB => grp_AlignStatic_fu_404_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    gmem_0_m_axi_U : component seq_align_multiple_static_gmem_0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_0_AWVALID,
        AWREADY => m_axi_gmem_0_AWREADY,
        AWADDR => m_axi_gmem_0_AWADDR,
        AWID => m_axi_gmem_0_AWID,
        AWLEN => m_axi_gmem_0_AWLEN,
        AWSIZE => m_axi_gmem_0_AWSIZE,
        AWBURST => m_axi_gmem_0_AWBURST,
        AWLOCK => m_axi_gmem_0_AWLOCK,
        AWCACHE => m_axi_gmem_0_AWCACHE,
        AWPROT => m_axi_gmem_0_AWPROT,
        AWQOS => m_axi_gmem_0_AWQOS,
        AWREGION => m_axi_gmem_0_AWREGION,
        AWUSER => m_axi_gmem_0_AWUSER,
        WVALID => m_axi_gmem_0_WVALID,
        WREADY => m_axi_gmem_0_WREADY,
        WDATA => m_axi_gmem_0_WDATA,
        WSTRB => m_axi_gmem_0_WSTRB,
        WLAST => m_axi_gmem_0_WLAST,
        WID => m_axi_gmem_0_WID,
        WUSER => m_axi_gmem_0_WUSER,
        ARVALID => m_axi_gmem_0_ARVALID,
        ARREADY => m_axi_gmem_0_ARREADY,
        ARADDR => m_axi_gmem_0_ARADDR,
        ARID => m_axi_gmem_0_ARID,
        ARLEN => m_axi_gmem_0_ARLEN,
        ARSIZE => m_axi_gmem_0_ARSIZE,
        ARBURST => m_axi_gmem_0_ARBURST,
        ARLOCK => m_axi_gmem_0_ARLOCK,
        ARCACHE => m_axi_gmem_0_ARCACHE,
        ARPROT => m_axi_gmem_0_ARPROT,
        ARQOS => m_axi_gmem_0_ARQOS,
        ARREGION => m_axi_gmem_0_ARREGION,
        ARUSER => m_axi_gmem_0_ARUSER,
        RVALID => m_axi_gmem_0_RVALID,
        RREADY => m_axi_gmem_0_RREADY,
        RDATA => m_axi_gmem_0_RDATA,
        RLAST => m_axi_gmem_0_RLAST,
        RID => m_axi_gmem_0_RID,
        RUSER => m_axi_gmem_0_RUSER,
        RRESP => m_axi_gmem_0_RRESP,
        BVALID => m_axi_gmem_0_BVALID,
        BREADY => m_axi_gmem_0_BREADY,
        BRESP => m_axi_gmem_0_BRESP,
        BID => m_axi_gmem_0_BID,
        BUSER => m_axi_gmem_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_0_ARVALID,
        I_ARREADY => gmem_0_ARREADY,
        I_ARADDR => grp_AlignStatic_fu_404_m_axi_gmem_0_ARADDR,
        I_ARLEN => grp_AlignStatic_fu_404_m_axi_gmem_0_ARLEN,
        I_RVALID => gmem_0_RVALID,
        I_RREADY => gmem_0_RREADY,
        I_RDATA => gmem_0_RDATA,
        I_RFIFONUM => gmem_0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem_0_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (grp_AlignStatic_fu_404_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AlignStatic_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AlignStatic_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_AlignStatic_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AlignStatic_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_AlignStatic_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                empty_reg_538 <= empty_fu_463_p1;
                tmp7_reg_543 <= penalties(31 downto 16);
                tmp_1_reg_553 <= penalties(63 downto 48);
                tmp_s_reg_548 <= penalties(47 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (gmem_RVALID = ap_const_logic_1))) then
                gmem_addr_1_read_reg_533 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (gmem_ARREADY = ap_const_logic_1))) then
                gmem_addr_1_reg_507 <= sext_ln49_fu_453_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state73) and (gmem_RVALID = ap_const_logic_1))) then
                gmem_addr_read_reg_528 <= gmem_RDATA;
                querys_0_read_reg_523 <= querys_0;
                references_read_reg_518 <= references;
                tb_streams_read_reg_513 <= tb_streams;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_reg_501 <= sext_ln48_fu_433_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state73, ap_CS_fsm_state3, ap_CS_fsm_state74, gmem_ARREADY, gmem_RVALID, grp_AlignStatic_fu_404_ap_done, ap_CS_fsm_state76)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (grp_AlignStatic_fu_404_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state74_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(grp_AlignStatic_fu_404_ap_done)
    begin
        if ((grp_AlignStatic_fu_404_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_AlignStatic_fu_404_ap_done, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) and (grp_AlignStatic_fu_404_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AlignStatic_fu_404_ap_done, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) and (grp_AlignStatic_fu_404_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_463_p1 <= penalties(16 - 1 downto 0);

    gmem_0_ARVALID_assign_proc : process(ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_0_ARVALID, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_0_ARVALID <= grp_AlignStatic_fu_404_m_axi_gmem_0_ARVALID;
        else 
            gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_RREADY_assign_proc : process(ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_0_RREADY, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_0_RREADY <= grp_AlignStatic_fu_404_m_axi_gmem_0_RREADY;
        else 
            gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, gmem_addr_reg_501, gmem_addr_1_reg_507, gmem_ARREADY, ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_ARADDR, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (gmem_ARREADY = ap_const_logic_1))) then 
            gmem_ARADDR <= gmem_addr_1_reg_507;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (gmem_ARREADY = ap_const_logic_1))) then 
            gmem_ARADDR <= gmem_addr_reg_501;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_ARADDR <= grp_AlignStatic_fu_404_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, gmem_ARREADY, ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_ARLEN, ap_CS_fsm_state76)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (gmem_ARREADY = ap_const_logic_1)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_ARLEN <= grp_AlignStatic_fu_404_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, gmem_ARREADY, ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_ARVALID, ap_CS_fsm_state76)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (gmem_ARREADY = ap_const_logic_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_ARVALID <= grp_AlignStatic_fu_404_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_AWVALID, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_AWVALID <= grp_AlignStatic_fu_404_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_BREADY, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_BREADY <= grp_AlignStatic_fu_404_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state74, gmem_RVALID, ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_RREADY, ap_CS_fsm_state76)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state74) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state73) and (gmem_RVALID = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_RREADY <= grp_AlignStatic_fu_404_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state75, grp_AlignStatic_fu_404_m_axi_gmem_WVALID, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            gmem_WVALID <= grp_AlignStatic_fu_404_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_AlignStatic_fu_404_ap_start <= grp_AlignStatic_fu_404_ap_start_reg;
    m_axi_gmem_10_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_10_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_10_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_10_ARID <= ap_const_lv1_0;
    m_axi_gmem_10_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_10_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_10_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_10_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_10_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_10_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_10_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_10_ARVALID <= ap_const_logic_0;
    m_axi_gmem_10_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_10_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_10_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_10_AWID <= ap_const_lv1_0;
    m_axi_gmem_10_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_10_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_10_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_10_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_10_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_10_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_10_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_10_AWVALID <= ap_const_logic_0;
    m_axi_gmem_10_BREADY <= ap_const_logic_0;
    m_axi_gmem_10_RREADY <= ap_const_logic_0;
    m_axi_gmem_10_WDATA <= ap_const_lv32_0;
    m_axi_gmem_10_WID <= ap_const_lv1_0;
    m_axi_gmem_10_WLAST <= ap_const_logic_0;
    m_axi_gmem_10_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_10_WUSER <= ap_const_lv1_0;
    m_axi_gmem_10_WVALID <= ap_const_logic_0;
    m_axi_gmem_11_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_11_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_11_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_11_ARID <= ap_const_lv1_0;
    m_axi_gmem_11_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_11_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_11_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_11_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_11_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_11_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_11_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_11_ARVALID <= ap_const_logic_0;
    m_axi_gmem_11_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_11_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_11_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_11_AWID <= ap_const_lv1_0;
    m_axi_gmem_11_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_11_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_11_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_11_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_11_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_11_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_11_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_11_AWVALID <= ap_const_logic_0;
    m_axi_gmem_11_BREADY <= ap_const_logic_0;
    m_axi_gmem_11_RREADY <= ap_const_logic_0;
    m_axi_gmem_11_WDATA <= ap_const_lv32_0;
    m_axi_gmem_11_WID <= ap_const_lv1_0;
    m_axi_gmem_11_WLAST <= ap_const_logic_0;
    m_axi_gmem_11_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_11_WUSER <= ap_const_lv1_0;
    m_axi_gmem_11_WVALID <= ap_const_logic_0;
    m_axi_gmem_12_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_12_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_12_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_12_ARID <= ap_const_lv1_0;
    m_axi_gmem_12_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_12_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_12_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_12_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_12_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_12_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_12_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_12_ARVALID <= ap_const_logic_0;
    m_axi_gmem_12_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_12_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_12_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_12_AWID <= ap_const_lv1_0;
    m_axi_gmem_12_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_12_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_12_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_12_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_12_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_12_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_12_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_12_AWVALID <= ap_const_logic_0;
    m_axi_gmem_12_BREADY <= ap_const_logic_0;
    m_axi_gmem_12_RREADY <= ap_const_logic_0;
    m_axi_gmem_12_WDATA <= ap_const_lv32_0;
    m_axi_gmem_12_WID <= ap_const_lv1_0;
    m_axi_gmem_12_WLAST <= ap_const_logic_0;
    m_axi_gmem_12_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_12_WUSER <= ap_const_lv1_0;
    m_axi_gmem_12_WVALID <= ap_const_logic_0;
    m_axi_gmem_13_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_13_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_13_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_13_ARID <= ap_const_lv1_0;
    m_axi_gmem_13_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_13_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_13_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_13_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_13_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_13_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_13_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_13_ARVALID <= ap_const_logic_0;
    m_axi_gmem_13_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_13_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_13_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_13_AWID <= ap_const_lv1_0;
    m_axi_gmem_13_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_13_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_13_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_13_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_13_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_13_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_13_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_13_AWVALID <= ap_const_logic_0;
    m_axi_gmem_13_BREADY <= ap_const_logic_0;
    m_axi_gmem_13_RREADY <= ap_const_logic_0;
    m_axi_gmem_13_WDATA <= ap_const_lv32_0;
    m_axi_gmem_13_WID <= ap_const_lv1_0;
    m_axi_gmem_13_WLAST <= ap_const_logic_0;
    m_axi_gmem_13_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_13_WUSER <= ap_const_lv1_0;
    m_axi_gmem_13_WVALID <= ap_const_logic_0;
    m_axi_gmem_14_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_14_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_14_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_14_ARID <= ap_const_lv1_0;
    m_axi_gmem_14_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_14_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_14_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_14_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_14_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_14_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_14_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_14_ARVALID <= ap_const_logic_0;
    m_axi_gmem_14_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_14_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_14_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_14_AWID <= ap_const_lv1_0;
    m_axi_gmem_14_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_14_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_14_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_14_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_14_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_14_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_14_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_14_AWVALID <= ap_const_logic_0;
    m_axi_gmem_14_BREADY <= ap_const_logic_0;
    m_axi_gmem_14_RREADY <= ap_const_logic_0;
    m_axi_gmem_14_WDATA <= ap_const_lv32_0;
    m_axi_gmem_14_WID <= ap_const_lv1_0;
    m_axi_gmem_14_WLAST <= ap_const_logic_0;
    m_axi_gmem_14_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_14_WUSER <= ap_const_lv1_0;
    m_axi_gmem_14_WVALID <= ap_const_logic_0;
    m_axi_gmem_15_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_15_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_15_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_15_ARID <= ap_const_lv1_0;
    m_axi_gmem_15_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_15_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_15_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_15_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_15_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_15_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_15_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_15_ARVALID <= ap_const_logic_0;
    m_axi_gmem_15_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_15_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_15_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_15_AWID <= ap_const_lv1_0;
    m_axi_gmem_15_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_15_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_15_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_15_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_15_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_15_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_15_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_15_AWVALID <= ap_const_logic_0;
    m_axi_gmem_15_BREADY <= ap_const_logic_0;
    m_axi_gmem_15_RREADY <= ap_const_logic_0;
    m_axi_gmem_15_WDATA <= ap_const_lv32_0;
    m_axi_gmem_15_WID <= ap_const_lv1_0;
    m_axi_gmem_15_WLAST <= ap_const_logic_0;
    m_axi_gmem_15_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_15_WUSER <= ap_const_lv1_0;
    m_axi_gmem_15_WVALID <= ap_const_logic_0;
    m_axi_gmem_16_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_16_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_16_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_16_ARID <= ap_const_lv1_0;
    m_axi_gmem_16_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_16_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_16_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_16_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_16_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_16_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_16_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_16_ARVALID <= ap_const_logic_0;
    m_axi_gmem_16_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_16_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_16_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_16_AWID <= ap_const_lv1_0;
    m_axi_gmem_16_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_16_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_16_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_16_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_16_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_16_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_16_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_16_AWVALID <= ap_const_logic_0;
    m_axi_gmem_16_BREADY <= ap_const_logic_0;
    m_axi_gmem_16_RREADY <= ap_const_logic_0;
    m_axi_gmem_16_WDATA <= ap_const_lv32_0;
    m_axi_gmem_16_WID <= ap_const_lv1_0;
    m_axi_gmem_16_WLAST <= ap_const_logic_0;
    m_axi_gmem_16_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_16_WUSER <= ap_const_lv1_0;
    m_axi_gmem_16_WVALID <= ap_const_logic_0;
    m_axi_gmem_17_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_17_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_17_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_17_ARID <= ap_const_lv1_0;
    m_axi_gmem_17_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_17_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_17_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_17_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_17_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_17_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_17_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_17_ARVALID <= ap_const_logic_0;
    m_axi_gmem_17_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_17_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_17_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_17_AWID <= ap_const_lv1_0;
    m_axi_gmem_17_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_17_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_17_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_17_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_17_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_17_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_17_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_17_AWVALID <= ap_const_logic_0;
    m_axi_gmem_17_BREADY <= ap_const_logic_0;
    m_axi_gmem_17_RREADY <= ap_const_logic_0;
    m_axi_gmem_17_WDATA <= ap_const_lv32_0;
    m_axi_gmem_17_WID <= ap_const_lv1_0;
    m_axi_gmem_17_WLAST <= ap_const_logic_0;
    m_axi_gmem_17_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_17_WUSER <= ap_const_lv1_0;
    m_axi_gmem_17_WVALID <= ap_const_logic_0;
    m_axi_gmem_18_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_18_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_18_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_18_ARID <= ap_const_lv1_0;
    m_axi_gmem_18_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_18_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_18_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_18_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_18_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_18_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_18_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_18_ARVALID <= ap_const_logic_0;
    m_axi_gmem_18_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_18_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_18_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_18_AWID <= ap_const_lv1_0;
    m_axi_gmem_18_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_18_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_18_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_18_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_18_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_18_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_18_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_18_AWVALID <= ap_const_logic_0;
    m_axi_gmem_18_BREADY <= ap_const_logic_0;
    m_axi_gmem_18_RREADY <= ap_const_logic_0;
    m_axi_gmem_18_WDATA <= ap_const_lv32_0;
    m_axi_gmem_18_WID <= ap_const_lv1_0;
    m_axi_gmem_18_WLAST <= ap_const_logic_0;
    m_axi_gmem_18_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_18_WUSER <= ap_const_lv1_0;
    m_axi_gmem_18_WVALID <= ap_const_logic_0;
    m_axi_gmem_19_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_19_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_19_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_19_ARID <= ap_const_lv1_0;
    m_axi_gmem_19_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_19_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_19_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_19_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_19_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_19_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_19_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_19_ARVALID <= ap_const_logic_0;
    m_axi_gmem_19_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_19_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_19_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_19_AWID <= ap_const_lv1_0;
    m_axi_gmem_19_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_19_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_19_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_19_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_19_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_19_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_19_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_19_AWVALID <= ap_const_logic_0;
    m_axi_gmem_19_BREADY <= ap_const_logic_0;
    m_axi_gmem_19_RREADY <= ap_const_logic_0;
    m_axi_gmem_19_WDATA <= ap_const_lv32_0;
    m_axi_gmem_19_WID <= ap_const_lv1_0;
    m_axi_gmem_19_WLAST <= ap_const_logic_0;
    m_axi_gmem_19_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_19_WUSER <= ap_const_lv1_0;
    m_axi_gmem_19_WVALID <= ap_const_logic_0;
    m_axi_gmem_1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_1_ARID <= ap_const_lv1_0;
    m_axi_gmem_1_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_1_ARVALID <= ap_const_logic_0;
    m_axi_gmem_1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_1_AWID <= ap_const_lv1_0;
    m_axi_gmem_1_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_1_AWVALID <= ap_const_logic_0;
    m_axi_gmem_1_BREADY <= ap_const_logic_0;
    m_axi_gmem_1_RREADY <= ap_const_logic_0;
    m_axi_gmem_1_WDATA <= ap_const_lv32_0;
    m_axi_gmem_1_WID <= ap_const_lv1_0;
    m_axi_gmem_1_WLAST <= ap_const_logic_0;
    m_axi_gmem_1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_1_WUSER <= ap_const_lv1_0;
    m_axi_gmem_1_WVALID <= ap_const_logic_0;
    m_axi_gmem_20_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_20_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_20_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_20_ARID <= ap_const_lv1_0;
    m_axi_gmem_20_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_20_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_20_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_20_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_20_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_20_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_20_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_20_ARVALID <= ap_const_logic_0;
    m_axi_gmem_20_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_20_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_20_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_20_AWID <= ap_const_lv1_0;
    m_axi_gmem_20_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_20_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_20_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_20_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_20_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_20_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_20_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_20_AWVALID <= ap_const_logic_0;
    m_axi_gmem_20_BREADY <= ap_const_logic_0;
    m_axi_gmem_20_RREADY <= ap_const_logic_0;
    m_axi_gmem_20_WDATA <= ap_const_lv32_0;
    m_axi_gmem_20_WID <= ap_const_lv1_0;
    m_axi_gmem_20_WLAST <= ap_const_logic_0;
    m_axi_gmem_20_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_20_WUSER <= ap_const_lv1_0;
    m_axi_gmem_20_WVALID <= ap_const_logic_0;
    m_axi_gmem_21_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_21_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_21_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_21_ARID <= ap_const_lv1_0;
    m_axi_gmem_21_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_21_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_21_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_21_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_21_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_21_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_21_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_21_ARVALID <= ap_const_logic_0;
    m_axi_gmem_21_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_21_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_21_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_21_AWID <= ap_const_lv1_0;
    m_axi_gmem_21_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_21_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_21_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_21_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_21_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_21_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_21_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_21_AWVALID <= ap_const_logic_0;
    m_axi_gmem_21_BREADY <= ap_const_logic_0;
    m_axi_gmem_21_RREADY <= ap_const_logic_0;
    m_axi_gmem_21_WDATA <= ap_const_lv32_0;
    m_axi_gmem_21_WID <= ap_const_lv1_0;
    m_axi_gmem_21_WLAST <= ap_const_logic_0;
    m_axi_gmem_21_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_21_WUSER <= ap_const_lv1_0;
    m_axi_gmem_21_WVALID <= ap_const_logic_0;
    m_axi_gmem_22_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_22_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_22_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_22_ARID <= ap_const_lv1_0;
    m_axi_gmem_22_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_22_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_22_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_22_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_22_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_22_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_22_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_22_ARVALID <= ap_const_logic_0;
    m_axi_gmem_22_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_22_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_22_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_22_AWID <= ap_const_lv1_0;
    m_axi_gmem_22_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_22_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_22_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_22_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_22_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_22_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_22_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_22_AWVALID <= ap_const_logic_0;
    m_axi_gmem_22_BREADY <= ap_const_logic_0;
    m_axi_gmem_22_RREADY <= ap_const_logic_0;
    m_axi_gmem_22_WDATA <= ap_const_lv32_0;
    m_axi_gmem_22_WID <= ap_const_lv1_0;
    m_axi_gmem_22_WLAST <= ap_const_logic_0;
    m_axi_gmem_22_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_22_WUSER <= ap_const_lv1_0;
    m_axi_gmem_22_WVALID <= ap_const_logic_0;
    m_axi_gmem_23_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_23_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_23_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_23_ARID <= ap_const_lv1_0;
    m_axi_gmem_23_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_23_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_23_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_23_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_23_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_23_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_23_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_23_ARVALID <= ap_const_logic_0;
    m_axi_gmem_23_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_23_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_23_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_23_AWID <= ap_const_lv1_0;
    m_axi_gmem_23_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_23_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_23_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_23_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_23_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_23_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_23_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_23_AWVALID <= ap_const_logic_0;
    m_axi_gmem_23_BREADY <= ap_const_logic_0;
    m_axi_gmem_23_RREADY <= ap_const_logic_0;
    m_axi_gmem_23_WDATA <= ap_const_lv32_0;
    m_axi_gmem_23_WID <= ap_const_lv1_0;
    m_axi_gmem_23_WLAST <= ap_const_logic_0;
    m_axi_gmem_23_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_23_WUSER <= ap_const_lv1_0;
    m_axi_gmem_23_WVALID <= ap_const_logic_0;
    m_axi_gmem_24_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_24_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_24_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_24_ARID <= ap_const_lv1_0;
    m_axi_gmem_24_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_24_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_24_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_24_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_24_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_24_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_24_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_24_ARVALID <= ap_const_logic_0;
    m_axi_gmem_24_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_24_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_24_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_24_AWID <= ap_const_lv1_0;
    m_axi_gmem_24_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_24_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_24_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_24_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_24_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_24_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_24_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_24_AWVALID <= ap_const_logic_0;
    m_axi_gmem_24_BREADY <= ap_const_logic_0;
    m_axi_gmem_24_RREADY <= ap_const_logic_0;
    m_axi_gmem_24_WDATA <= ap_const_lv32_0;
    m_axi_gmem_24_WID <= ap_const_lv1_0;
    m_axi_gmem_24_WLAST <= ap_const_logic_0;
    m_axi_gmem_24_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_24_WUSER <= ap_const_lv1_0;
    m_axi_gmem_24_WVALID <= ap_const_logic_0;
    m_axi_gmem_25_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_25_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_25_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_25_ARID <= ap_const_lv1_0;
    m_axi_gmem_25_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_25_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_25_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_25_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_25_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_25_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_25_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_25_ARVALID <= ap_const_logic_0;
    m_axi_gmem_25_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_25_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_25_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_25_AWID <= ap_const_lv1_0;
    m_axi_gmem_25_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_25_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_25_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_25_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_25_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_25_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_25_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_25_AWVALID <= ap_const_logic_0;
    m_axi_gmem_25_BREADY <= ap_const_logic_0;
    m_axi_gmem_25_RREADY <= ap_const_logic_0;
    m_axi_gmem_25_WDATA <= ap_const_lv32_0;
    m_axi_gmem_25_WID <= ap_const_lv1_0;
    m_axi_gmem_25_WLAST <= ap_const_logic_0;
    m_axi_gmem_25_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_25_WUSER <= ap_const_lv1_0;
    m_axi_gmem_25_WVALID <= ap_const_logic_0;
    m_axi_gmem_26_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_26_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_26_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_26_ARID <= ap_const_lv1_0;
    m_axi_gmem_26_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_26_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_26_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_26_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_26_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_26_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_26_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_26_ARVALID <= ap_const_logic_0;
    m_axi_gmem_26_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_26_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_26_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_26_AWID <= ap_const_lv1_0;
    m_axi_gmem_26_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_26_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_26_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_26_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_26_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_26_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_26_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_26_AWVALID <= ap_const_logic_0;
    m_axi_gmem_26_BREADY <= ap_const_logic_0;
    m_axi_gmem_26_RREADY <= ap_const_logic_0;
    m_axi_gmem_26_WDATA <= ap_const_lv32_0;
    m_axi_gmem_26_WID <= ap_const_lv1_0;
    m_axi_gmem_26_WLAST <= ap_const_logic_0;
    m_axi_gmem_26_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_26_WUSER <= ap_const_lv1_0;
    m_axi_gmem_26_WVALID <= ap_const_logic_0;
    m_axi_gmem_27_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_27_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_27_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_27_ARID <= ap_const_lv1_0;
    m_axi_gmem_27_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_27_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_27_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_27_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_27_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_27_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_27_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_27_ARVALID <= ap_const_logic_0;
    m_axi_gmem_27_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_27_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_27_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_27_AWID <= ap_const_lv1_0;
    m_axi_gmem_27_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_27_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_27_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_27_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_27_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_27_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_27_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_27_AWVALID <= ap_const_logic_0;
    m_axi_gmem_27_BREADY <= ap_const_logic_0;
    m_axi_gmem_27_RREADY <= ap_const_logic_0;
    m_axi_gmem_27_WDATA <= ap_const_lv32_0;
    m_axi_gmem_27_WID <= ap_const_lv1_0;
    m_axi_gmem_27_WLAST <= ap_const_logic_0;
    m_axi_gmem_27_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_27_WUSER <= ap_const_lv1_0;
    m_axi_gmem_27_WVALID <= ap_const_logic_0;
    m_axi_gmem_28_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_28_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_28_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_28_ARID <= ap_const_lv1_0;
    m_axi_gmem_28_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_28_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_28_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_28_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_28_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_28_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_28_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_28_ARVALID <= ap_const_logic_0;
    m_axi_gmem_28_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_28_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_28_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_28_AWID <= ap_const_lv1_0;
    m_axi_gmem_28_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_28_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_28_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_28_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_28_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_28_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_28_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_28_AWVALID <= ap_const_logic_0;
    m_axi_gmem_28_BREADY <= ap_const_logic_0;
    m_axi_gmem_28_RREADY <= ap_const_logic_0;
    m_axi_gmem_28_WDATA <= ap_const_lv32_0;
    m_axi_gmem_28_WID <= ap_const_lv1_0;
    m_axi_gmem_28_WLAST <= ap_const_logic_0;
    m_axi_gmem_28_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_28_WUSER <= ap_const_lv1_0;
    m_axi_gmem_28_WVALID <= ap_const_logic_0;
    m_axi_gmem_29_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_29_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_29_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_29_ARID <= ap_const_lv1_0;
    m_axi_gmem_29_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_29_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_29_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_29_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_29_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_29_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_29_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_29_ARVALID <= ap_const_logic_0;
    m_axi_gmem_29_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_29_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_29_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_29_AWID <= ap_const_lv1_0;
    m_axi_gmem_29_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_29_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_29_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_29_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_29_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_29_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_29_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_29_AWVALID <= ap_const_logic_0;
    m_axi_gmem_29_BREADY <= ap_const_logic_0;
    m_axi_gmem_29_RREADY <= ap_const_logic_0;
    m_axi_gmem_29_WDATA <= ap_const_lv32_0;
    m_axi_gmem_29_WID <= ap_const_lv1_0;
    m_axi_gmem_29_WLAST <= ap_const_logic_0;
    m_axi_gmem_29_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_29_WUSER <= ap_const_lv1_0;
    m_axi_gmem_29_WVALID <= ap_const_logic_0;
    m_axi_gmem_2_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_2_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_2_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_2_ARID <= ap_const_lv1_0;
    m_axi_gmem_2_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_2_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_2_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_2_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_2_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_2_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_2_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_2_ARVALID <= ap_const_logic_0;
    m_axi_gmem_2_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_2_AWID <= ap_const_lv1_0;
    m_axi_gmem_2_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_2_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_2_AWVALID <= ap_const_logic_0;
    m_axi_gmem_2_BREADY <= ap_const_logic_0;
    m_axi_gmem_2_RREADY <= ap_const_logic_0;
    m_axi_gmem_2_WDATA <= ap_const_lv32_0;
    m_axi_gmem_2_WID <= ap_const_lv1_0;
    m_axi_gmem_2_WLAST <= ap_const_logic_0;
    m_axi_gmem_2_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_2_WUSER <= ap_const_lv1_0;
    m_axi_gmem_2_WVALID <= ap_const_logic_0;
    m_axi_gmem_30_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_30_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_30_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_30_ARID <= ap_const_lv1_0;
    m_axi_gmem_30_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_30_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_30_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_30_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_30_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_30_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_30_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_30_ARVALID <= ap_const_logic_0;
    m_axi_gmem_30_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_30_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_30_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_30_AWID <= ap_const_lv1_0;
    m_axi_gmem_30_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_30_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_30_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_30_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_30_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_30_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_30_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_30_AWVALID <= ap_const_logic_0;
    m_axi_gmem_30_BREADY <= ap_const_logic_0;
    m_axi_gmem_30_RREADY <= ap_const_logic_0;
    m_axi_gmem_30_WDATA <= ap_const_lv32_0;
    m_axi_gmem_30_WID <= ap_const_lv1_0;
    m_axi_gmem_30_WLAST <= ap_const_logic_0;
    m_axi_gmem_30_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_30_WUSER <= ap_const_lv1_0;
    m_axi_gmem_30_WVALID <= ap_const_logic_0;
    m_axi_gmem_31_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_31_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_31_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_31_ARID <= ap_const_lv1_0;
    m_axi_gmem_31_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_31_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_31_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_31_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_31_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_31_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_31_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_31_ARVALID <= ap_const_logic_0;
    m_axi_gmem_31_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_31_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_31_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_31_AWID <= ap_const_lv1_0;
    m_axi_gmem_31_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_31_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_31_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_31_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_31_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_31_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_31_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_31_AWVALID <= ap_const_logic_0;
    m_axi_gmem_31_BREADY <= ap_const_logic_0;
    m_axi_gmem_31_RREADY <= ap_const_logic_0;
    m_axi_gmem_31_WDATA <= ap_const_lv32_0;
    m_axi_gmem_31_WID <= ap_const_lv1_0;
    m_axi_gmem_31_WLAST <= ap_const_logic_0;
    m_axi_gmem_31_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_31_WUSER <= ap_const_lv1_0;
    m_axi_gmem_31_WVALID <= ap_const_logic_0;
    m_axi_gmem_3_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_3_ARID <= ap_const_lv1_0;
    m_axi_gmem_3_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_3_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_3_ARVALID <= ap_const_logic_0;
    m_axi_gmem_3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_3_AWID <= ap_const_lv1_0;
    m_axi_gmem_3_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_3_AWVALID <= ap_const_logic_0;
    m_axi_gmem_3_BREADY <= ap_const_logic_0;
    m_axi_gmem_3_RREADY <= ap_const_logic_0;
    m_axi_gmem_3_WDATA <= ap_const_lv32_0;
    m_axi_gmem_3_WID <= ap_const_lv1_0;
    m_axi_gmem_3_WLAST <= ap_const_logic_0;
    m_axi_gmem_3_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_3_WUSER <= ap_const_lv1_0;
    m_axi_gmem_3_WVALID <= ap_const_logic_0;
    m_axi_gmem_4_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_4_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_4_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_4_ARID <= ap_const_lv1_0;
    m_axi_gmem_4_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_4_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_4_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_4_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_4_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_4_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_4_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_4_ARVALID <= ap_const_logic_0;
    m_axi_gmem_4_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_4_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_4_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_4_AWID <= ap_const_lv1_0;
    m_axi_gmem_4_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_4_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_4_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_4_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_4_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_4_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_4_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_4_AWVALID <= ap_const_logic_0;
    m_axi_gmem_4_BREADY <= ap_const_logic_0;
    m_axi_gmem_4_RREADY <= ap_const_logic_0;
    m_axi_gmem_4_WDATA <= ap_const_lv32_0;
    m_axi_gmem_4_WID <= ap_const_lv1_0;
    m_axi_gmem_4_WLAST <= ap_const_logic_0;
    m_axi_gmem_4_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_4_WUSER <= ap_const_lv1_0;
    m_axi_gmem_4_WVALID <= ap_const_logic_0;
    m_axi_gmem_5_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_5_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_5_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_5_ARID <= ap_const_lv1_0;
    m_axi_gmem_5_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_5_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_5_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_5_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_5_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_5_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_5_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_5_ARVALID <= ap_const_logic_0;
    m_axi_gmem_5_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_5_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_5_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_5_AWID <= ap_const_lv1_0;
    m_axi_gmem_5_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_5_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_5_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_5_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_5_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_5_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_5_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_5_AWVALID <= ap_const_logic_0;
    m_axi_gmem_5_BREADY <= ap_const_logic_0;
    m_axi_gmem_5_RREADY <= ap_const_logic_0;
    m_axi_gmem_5_WDATA <= ap_const_lv32_0;
    m_axi_gmem_5_WID <= ap_const_lv1_0;
    m_axi_gmem_5_WLAST <= ap_const_logic_0;
    m_axi_gmem_5_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_5_WUSER <= ap_const_lv1_0;
    m_axi_gmem_5_WVALID <= ap_const_logic_0;
    m_axi_gmem_6_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_6_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_6_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_6_ARID <= ap_const_lv1_0;
    m_axi_gmem_6_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_6_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_6_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_6_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_6_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_6_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_6_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_6_ARVALID <= ap_const_logic_0;
    m_axi_gmem_6_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_6_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_6_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_6_AWID <= ap_const_lv1_0;
    m_axi_gmem_6_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_6_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_6_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_6_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_6_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_6_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_6_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_6_AWVALID <= ap_const_logic_0;
    m_axi_gmem_6_BREADY <= ap_const_logic_0;
    m_axi_gmem_6_RREADY <= ap_const_logic_0;
    m_axi_gmem_6_WDATA <= ap_const_lv32_0;
    m_axi_gmem_6_WID <= ap_const_lv1_0;
    m_axi_gmem_6_WLAST <= ap_const_logic_0;
    m_axi_gmem_6_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_6_WUSER <= ap_const_lv1_0;
    m_axi_gmem_6_WVALID <= ap_const_logic_0;
    m_axi_gmem_7_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_7_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_7_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_7_ARID <= ap_const_lv1_0;
    m_axi_gmem_7_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_7_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_7_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_7_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_7_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_7_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_7_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_7_ARVALID <= ap_const_logic_0;
    m_axi_gmem_7_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_7_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_7_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_7_AWID <= ap_const_lv1_0;
    m_axi_gmem_7_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_7_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_7_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_7_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_7_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_7_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_7_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_7_AWVALID <= ap_const_logic_0;
    m_axi_gmem_7_BREADY <= ap_const_logic_0;
    m_axi_gmem_7_RREADY <= ap_const_logic_0;
    m_axi_gmem_7_WDATA <= ap_const_lv32_0;
    m_axi_gmem_7_WID <= ap_const_lv1_0;
    m_axi_gmem_7_WLAST <= ap_const_logic_0;
    m_axi_gmem_7_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_7_WUSER <= ap_const_lv1_0;
    m_axi_gmem_7_WVALID <= ap_const_logic_0;
    m_axi_gmem_8_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_8_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_8_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_8_ARID <= ap_const_lv1_0;
    m_axi_gmem_8_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_8_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_8_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_8_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_8_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_8_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_8_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_8_ARVALID <= ap_const_logic_0;
    m_axi_gmem_8_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_8_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_8_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_8_AWID <= ap_const_lv1_0;
    m_axi_gmem_8_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_8_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_8_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_8_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_8_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_8_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_8_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_8_AWVALID <= ap_const_logic_0;
    m_axi_gmem_8_BREADY <= ap_const_logic_0;
    m_axi_gmem_8_RREADY <= ap_const_logic_0;
    m_axi_gmem_8_WDATA <= ap_const_lv32_0;
    m_axi_gmem_8_WID <= ap_const_lv1_0;
    m_axi_gmem_8_WLAST <= ap_const_logic_0;
    m_axi_gmem_8_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_8_WUSER <= ap_const_lv1_0;
    m_axi_gmem_8_WVALID <= ap_const_logic_0;
    m_axi_gmem_9_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_9_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_9_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_9_ARID <= ap_const_lv1_0;
    m_axi_gmem_9_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_9_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_9_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_9_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_9_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_9_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_9_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_9_ARVALID <= ap_const_logic_0;
    m_axi_gmem_9_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_9_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_9_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_9_AWID <= ap_const_lv1_0;
    m_axi_gmem_9_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_9_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_9_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_9_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_9_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_9_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_9_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_9_AWVALID <= ap_const_logic_0;
    m_axi_gmem_9_BREADY <= ap_const_logic_0;
    m_axi_gmem_9_RREADY <= ap_const_logic_0;
    m_axi_gmem_9_WDATA <= ap_const_lv32_0;
    m_axi_gmem_9_WID <= ap_const_lv1_0;
    m_axi_gmem_9_WLAST <= ap_const_logic_0;
    m_axi_gmem_9_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_9_WUSER <= ap_const_lv1_0;
    m_axi_gmem_9_WVALID <= ap_const_logic_0;
        sext_ln48_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_423_p4),64));

        sext_ln49_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_443_p4),64));

    trunc_ln1_fu_443_p4 <= reference_lengths(63 downto 2);
    trunc_ln_fu_423_p4 <= query_lengths(63 downto 2);
end behav;
