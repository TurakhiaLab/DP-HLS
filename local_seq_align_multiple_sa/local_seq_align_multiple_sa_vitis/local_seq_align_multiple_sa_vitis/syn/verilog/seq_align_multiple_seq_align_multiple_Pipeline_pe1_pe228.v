// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module seq_align_multiple_seq_align_multiple_Pipeline_pe1_pe228 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dp_matrix_V_address0,
        dp_matrix_V_ce0,
        dp_matrix_V_q0,
        dp_matrix_V_1_address0,
        dp_matrix_V_1_ce0,
        dp_matrix_V_1_q0,
        dp_matrix_V_2_address0,
        dp_matrix_V_2_ce0,
        dp_matrix_V_2_q0,
        dp_matrix_V_3_address0,
        dp_matrix_V_3_ce0,
        dp_matrix_V_3_q0,
        dp_matrix_V_4_address0,
        dp_matrix_V_4_ce0,
        dp_matrix_V_4_q0,
        dp_matrix_V_5_address0,
        dp_matrix_V_5_ce0,
        dp_matrix_V_5_q0,
        dp_matrix_V_6_address0,
        dp_matrix_V_6_ce0,
        dp_matrix_V_6_q0,
        dp_matrix_V_7_address0,
        dp_matrix_V_7_ce0,
        dp_matrix_V_7_q0,
        dp_matrix_V_8_address0,
        dp_matrix_V_8_ce0,
        dp_matrix_V_8_q0,
        dp_matrix_V_9_address0,
        dp_matrix_V_9_ce0,
        dp_matrix_V_9_q0,
        dp_matrix_V_10_address0,
        dp_matrix_V_10_ce0,
        dp_matrix_V_10_q0,
        dp_matrix_V_11_address0,
        dp_matrix_V_11_ce0,
        dp_matrix_V_11_q0,
        dp_matrix_V_12_address0,
        dp_matrix_V_12_ce0,
        dp_matrix_V_12_q0,
        dp_matrix_V_13_address0,
        dp_matrix_V_13_ce0,
        dp_matrix_V_13_q0,
        dp_matrix_V_14_address0,
        dp_matrix_V_14_ce0,
        dp_matrix_V_14_q0,
        dp_matrix_V_15_address0,
        dp_matrix_V_15_ce0,
        dp_matrix_V_15_q0,
        max_col_value_15_out,
        max_col_value_15_out_ap_vld,
        max_row_value_15_out,
        max_row_value_15_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] dp_matrix_V_address0;
output   dp_matrix_V_ce0;
input  [8:0] dp_matrix_V_q0;
output  [7:0] dp_matrix_V_1_address0;
output   dp_matrix_V_1_ce0;
input  [8:0] dp_matrix_V_1_q0;
output  [7:0] dp_matrix_V_2_address0;
output   dp_matrix_V_2_ce0;
input  [8:0] dp_matrix_V_2_q0;
output  [7:0] dp_matrix_V_3_address0;
output   dp_matrix_V_3_ce0;
input  [8:0] dp_matrix_V_3_q0;
output  [7:0] dp_matrix_V_4_address0;
output   dp_matrix_V_4_ce0;
input  [8:0] dp_matrix_V_4_q0;
output  [7:0] dp_matrix_V_5_address0;
output   dp_matrix_V_5_ce0;
input  [8:0] dp_matrix_V_5_q0;
output  [7:0] dp_matrix_V_6_address0;
output   dp_matrix_V_6_ce0;
input  [8:0] dp_matrix_V_6_q0;
output  [7:0] dp_matrix_V_7_address0;
output   dp_matrix_V_7_ce0;
input  [8:0] dp_matrix_V_7_q0;
output  [7:0] dp_matrix_V_8_address0;
output   dp_matrix_V_8_ce0;
input  [8:0] dp_matrix_V_8_q0;
output  [7:0] dp_matrix_V_9_address0;
output   dp_matrix_V_9_ce0;
input  [8:0] dp_matrix_V_9_q0;
output  [7:0] dp_matrix_V_10_address0;
output   dp_matrix_V_10_ce0;
input  [8:0] dp_matrix_V_10_q0;
output  [7:0] dp_matrix_V_11_address0;
output   dp_matrix_V_11_ce0;
input  [8:0] dp_matrix_V_11_q0;
output  [7:0] dp_matrix_V_12_address0;
output   dp_matrix_V_12_ce0;
input  [8:0] dp_matrix_V_12_q0;
output  [7:0] dp_matrix_V_13_address0;
output   dp_matrix_V_13_ce0;
input  [8:0] dp_matrix_V_13_q0;
output  [7:0] dp_matrix_V_14_address0;
output   dp_matrix_V_14_ce0;
input  [8:0] dp_matrix_V_14_q0;
output  [7:0] dp_matrix_V_15_address0;
output   dp_matrix_V_15_ce0;
input  [8:0] dp_matrix_V_15_q0;
output  [7:0] max_col_value_15_out;
output   max_col_value_15_out_ap_vld;
output  [5:0] max_row_value_15_out;
output   max_row_value_15_out_ap_vld;

reg ap_idle;
reg dp_matrix_V_ce0;
reg dp_matrix_V_1_ce0;
reg dp_matrix_V_2_ce0;
reg dp_matrix_V_3_ce0;
reg dp_matrix_V_4_ce0;
reg dp_matrix_V_5_ce0;
reg dp_matrix_V_6_ce0;
reg dp_matrix_V_7_ce0;
reg dp_matrix_V_8_ce0;
reg dp_matrix_V_9_ce0;
reg dp_matrix_V_10_ce0;
reg dp_matrix_V_11_ce0;
reg dp_matrix_V_12_ce0;
reg dp_matrix_V_13_ce0;
reg dp_matrix_V_14_ce0;
reg dp_matrix_V_15_ce0;
reg max_col_value_15_out_ap_vld;
reg max_row_value_15_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln168_fu_348_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln168_reg_599;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] trunc_ln168_8_fu_394_p1;
reg   [5:0] trunc_ln168_8_reg_603;
wire   [3:0] trunc_ln168_9_fu_416_p1;
reg   [3:0] trunc_ln168_9_reg_608;
wire   [5:0] trunc_ln173_fu_450_p1;
reg   [5:0] trunc_ln173_reg_693;
wire   [63:0] zext_ln1649_3_fu_430_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_row_value_fu_88;
wire   [31:0] max_row_value_7_fu_537_p3;
reg   [31:0] max_col_value_fu_92;
wire   [31:0] max_col_value_11_fu_548_p3;
reg   [6:0] max_col_value_8_fu_96;
wire   [6:0] add_ln171_fu_454_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_max_col_value_8_load;
reg   [6:0] x_fu_100;
wire   [6:0] select_ln168_3_fu_386_p3;
reg   [6:0] ap_sig_allocacmp_x_load;
reg   [12:0] indvar_flatten253_fu_104;
wire   [12:0] add_ln168_fu_354_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten253_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln171_fu_372_p2;
wire   [6:0] add_ln168_2_fu_366_p2;
wire   [1:0] p_cast411_mid2_v_fu_398_p4;
wire   [6:0] select_ln168_fu_378_p3;
wire   [7:0] tmp_s_fu_408_p3;
wire   [7:0] zext_ln1649_fu_420_p1;
wire   [7:0] add_ln1649_fu_424_p2;
wire   [8:0] tmp_3_fu_494_p18;
wire   [0:0] icmp_ln1649_fu_531_p2;
wire   [31:0] zext_ln168_fu_491_p1;
wire   [31:0] zext_ln173_fu_545_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

seq_align_multiple_mux_164_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 9 ),
    .din4_WIDTH( 9 ),
    .din5_WIDTH( 9 ),
    .din6_WIDTH( 9 ),
    .din7_WIDTH( 9 ),
    .din8_WIDTH( 9 ),
    .din9_WIDTH( 9 ),
    .din10_WIDTH( 9 ),
    .din11_WIDTH( 9 ),
    .din12_WIDTH( 9 ),
    .din13_WIDTH( 9 ),
    .din14_WIDTH( 9 ),
    .din15_WIDTH( 9 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
mux_164_9_1_1_U5193(
    .din0(dp_matrix_V_q0),
    .din1(dp_matrix_V_1_q0),
    .din2(dp_matrix_V_2_q0),
    .din3(dp_matrix_V_3_q0),
    .din4(dp_matrix_V_4_q0),
    .din5(dp_matrix_V_5_q0),
    .din6(dp_matrix_V_6_q0),
    .din7(dp_matrix_V_7_q0),
    .din8(dp_matrix_V_8_q0),
    .din9(dp_matrix_V_9_q0),
    .din10(dp_matrix_V_10_q0),
    .din11(dp_matrix_V_11_q0),
    .din12(dp_matrix_V_12_q0),
    .din13(dp_matrix_V_13_q0),
    .din14(dp_matrix_V_14_q0),
    .din15(dp_matrix_V_15_q0),
    .din16(trunc_ln168_9_reg_608),
    .dout(tmp_3_fu_494_p18)
);

seq_align_multiple_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln168_fu_348_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten253_fu_104 <= add_ln168_fu_354_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten253_fu_104 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln168_fu_348_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            max_col_value_8_fu_96 <= add_ln171_fu_454_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            max_col_value_8_fu_96 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln168_fu_348_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_100 <= select_ln168_3_fu_386_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_100 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln168_reg_599 <= icmp_ln168_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_599 == 1'd0))) begin
        max_col_value_fu_92 <= max_col_value_11_fu_548_p3;
        max_row_value_fu_88 <= max_row_value_7_fu_537_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_348_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln168_8_reg_603 <= trunc_ln168_8_fu_394_p1;
        trunc_ln168_9_reg_608 <= trunc_ln168_9_fu_416_p1;
        trunc_ln173_reg_693 <= trunc_ln173_fu_450_p1;
    end
end

always @ (*) begin
    if (((icmp_ln168_fu_348_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten253_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten253_load = indvar_flatten253_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_max_col_value_8_load = 7'd0;
    end else begin
        ap_sig_allocacmp_max_col_value_8_load = max_col_value_8_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_load = 7'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_10_ce0 = 1'b1;
    end else begin
        dp_matrix_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_11_ce0 = 1'b1;
    end else begin
        dp_matrix_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_12_ce0 = 1'b1;
    end else begin
        dp_matrix_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_13_ce0 = 1'b1;
    end else begin
        dp_matrix_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_14_ce0 = 1'b1;
    end else begin
        dp_matrix_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_15_ce0 = 1'b1;
    end else begin
        dp_matrix_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_1_ce0 = 1'b1;
    end else begin
        dp_matrix_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_2_ce0 = 1'b1;
    end else begin
        dp_matrix_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_3_ce0 = 1'b1;
    end else begin
        dp_matrix_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_4_ce0 = 1'b1;
    end else begin
        dp_matrix_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_5_ce0 = 1'b1;
    end else begin
        dp_matrix_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_6_ce0 = 1'b1;
    end else begin
        dp_matrix_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_7_ce0 = 1'b1;
    end else begin
        dp_matrix_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_8_ce0 = 1'b1;
    end else begin
        dp_matrix_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_9_ce0 = 1'b1;
    end else begin
        dp_matrix_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dp_matrix_V_ce0 = 1'b1;
    end else begin
        dp_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_599 == 1'd1))) begin
        max_col_value_15_out_ap_vld = 1'b1;
    end else begin
        max_col_value_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_599 == 1'd1))) begin
        max_row_value_15_out_ap_vld = 1'b1;
    end else begin
        max_row_value_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1649_fu_424_p2 = (tmp_s_fu_408_p3 + zext_ln1649_fu_420_p1);

assign add_ln168_2_fu_366_p2 = (ap_sig_allocacmp_x_load + 7'd1);

assign add_ln168_fu_354_p2 = (ap_sig_allocacmp_indvar_flatten253_load + 13'd1);

assign add_ln171_fu_454_p2 = (select_ln168_fu_378_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dp_matrix_V_10_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_11_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_12_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_13_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_14_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_15_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_1_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_2_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_3_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_4_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_5_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_6_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_7_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_8_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_9_address0 = zext_ln1649_3_fu_430_p1;

assign dp_matrix_V_address0 = zext_ln1649_3_fu_430_p1;

assign icmp_ln1649_fu_531_p2 = ((tmp_3_fu_494_p18 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_348_p2 = ((ap_sig_allocacmp_indvar_flatten253_load == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_372_p2 = ((ap_sig_allocacmp_max_col_value_8_load == 7'd64) ? 1'b1 : 1'b0);

assign max_col_value_11_fu_548_p3 = ((icmp_ln1649_fu_531_p2[0:0] == 1'b1) ? zext_ln173_fu_545_p1 : max_col_value_fu_92);

assign max_col_value_15_out = max_col_value_fu_92[7:0];

assign max_row_value_15_out = max_row_value_fu_88[5:0];

assign max_row_value_7_fu_537_p3 = ((icmp_ln1649_fu_531_p2[0:0] == 1'b1) ? zext_ln168_fu_491_p1 : max_row_value_fu_88);

assign p_cast411_mid2_v_fu_398_p4 = {{select_ln168_3_fu_386_p3[5:4]}};

assign select_ln168_3_fu_386_p3 = ((icmp_ln171_fu_372_p2[0:0] == 1'b1) ? add_ln168_2_fu_366_p2 : ap_sig_allocacmp_x_load);

assign select_ln168_fu_378_p3 = ((icmp_ln171_fu_372_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_max_col_value_8_load);

assign tmp_s_fu_408_p3 = {{p_cast411_mid2_v_fu_398_p4}, {6'd0}};

assign trunc_ln168_8_fu_394_p1 = select_ln168_3_fu_386_p3[5:0];

assign trunc_ln168_9_fu_416_p1 = select_ln168_3_fu_386_p3[3:0];

assign trunc_ln173_fu_450_p1 = select_ln168_fu_378_p3[5:0];

assign zext_ln1649_3_fu_430_p1 = add_ln1649_fu_424_p2;

assign zext_ln1649_fu_420_p1 = select_ln168_fu_378_p3;

assign zext_ln168_fu_491_p1 = trunc_ln168_8_reg_603;

assign zext_ln173_fu_545_p1 = trunc_ln173_reg_693;

endmodule //seq_align_multiple_seq_align_multiple_Pipeline_pe1_pe228
