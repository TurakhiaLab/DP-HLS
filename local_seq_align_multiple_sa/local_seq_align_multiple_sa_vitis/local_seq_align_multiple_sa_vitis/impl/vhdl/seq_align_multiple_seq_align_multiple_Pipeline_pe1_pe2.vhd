-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seq_align_multiple_seq_align_multiple_Pipeline_pe1_pe2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dp_matrix_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_ce0 : OUT STD_LOGIC;
    dp_matrix_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_1_ce0 : OUT STD_LOGIC;
    dp_matrix_V_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_2_ce0 : OUT STD_LOGIC;
    dp_matrix_V_2_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_3_ce0 : OUT STD_LOGIC;
    dp_matrix_V_3_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_4_ce0 : OUT STD_LOGIC;
    dp_matrix_V_4_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_5_ce0 : OUT STD_LOGIC;
    dp_matrix_V_5_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_6_ce0 : OUT STD_LOGIC;
    dp_matrix_V_6_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_7_ce0 : OUT STD_LOGIC;
    dp_matrix_V_7_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_8_ce0 : OUT STD_LOGIC;
    dp_matrix_V_8_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_9_ce0 : OUT STD_LOGIC;
    dp_matrix_V_9_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_10_ce0 : OUT STD_LOGIC;
    dp_matrix_V_10_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_11_ce0 : OUT STD_LOGIC;
    dp_matrix_V_11_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_12_ce0 : OUT STD_LOGIC;
    dp_matrix_V_12_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_13_ce0 : OUT STD_LOGIC;
    dp_matrix_V_13_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_14_ce0 : OUT STD_LOGIC;
    dp_matrix_V_14_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    dp_matrix_V_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dp_matrix_V_15_ce0 : OUT STD_LOGIC;
    dp_matrix_V_15_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    max_col_value_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_col_value_1_out_ap_vld : OUT STD_LOGIC;
    max_row_value_1_out : OUT STD_LOGIC_VECTOR (5 downto 0);
    max_row_value_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of seq_align_multiple_seq_align_multiple_Pipeline_pe1_pe2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln168_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln168_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln168_23_fu_394_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln168_23_reg_603 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln168_24_fu_416_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln168_24_reg_608 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln173_fu_450_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln173_reg_693 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1649_8_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal max_row_value_1_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_row_value_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_col_value_1_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_col_value_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_col_value_24_fu_96 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln171_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_max_col_value_24_load : STD_LOGIC_VECTOR (6 downto 0);
    signal max_row_value_16_fu_100 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln168_1_fu_386_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_max_row_value_16_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten22_fu_104 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln168_5_fu_354_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten22_load : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln171_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln168_fu_366_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast286_mid2_v_fu_398_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_fu_378_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_408_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1649_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_494_p18 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1649_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln168_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln173_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component seq_align_multiple_mux_164_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        din4 : IN STD_LOGIC_VECTOR (8 downto 0);
        din5 : IN STD_LOGIC_VECTOR (8 downto 0);
        din6 : IN STD_LOGIC_VECTOR (8 downto 0);
        din7 : IN STD_LOGIC_VECTOR (8 downto 0);
        din8 : IN STD_LOGIC_VECTOR (8 downto 0);
        din9 : IN STD_LOGIC_VECTOR (8 downto 0);
        din10 : IN STD_LOGIC_VECTOR (8 downto 0);
        din11 : IN STD_LOGIC_VECTOR (8 downto 0);
        din12 : IN STD_LOGIC_VECTOR (8 downto 0);
        din13 : IN STD_LOGIC_VECTOR (8 downto 0);
        din14 : IN STD_LOGIC_VECTOR (8 downto 0);
        din15 : IN STD_LOGIC_VECTOR (8 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component seq_align_multiple_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_9_1_1_U567 : component seq_align_multiple_mux_164_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        din4_WIDTH => 9,
        din5_WIDTH => 9,
        din6_WIDTH => 9,
        din7_WIDTH => 9,
        din8_WIDTH => 9,
        din9_WIDTH => 9,
        din10_WIDTH => 9,
        din11_WIDTH => 9,
        din12_WIDTH => 9,
        din13_WIDTH => 9,
        din14_WIDTH => 9,
        din15_WIDTH => 9,
        din16_WIDTH => 4,
        dout_WIDTH => 9)
    port map (
        din0 => dp_matrix_V_q0,
        din1 => dp_matrix_V_1_q0,
        din2 => dp_matrix_V_2_q0,
        din3 => dp_matrix_V_3_q0,
        din4 => dp_matrix_V_4_q0,
        din5 => dp_matrix_V_5_q0,
        din6 => dp_matrix_V_6_q0,
        din7 => dp_matrix_V_7_q0,
        din8 => dp_matrix_V_8_q0,
        din9 => dp_matrix_V_9_q0,
        din10 => dp_matrix_V_10_q0,
        din11 => dp_matrix_V_11_q0,
        din12 => dp_matrix_V_12_q0,
        din13 => dp_matrix_V_13_q0,
        din14 => dp_matrix_V_14_q0,
        din15 => dp_matrix_V_15_q0,
        din16 => trunc_ln168_24_reg_608,
        dout => tmp_fu_494_p18);

    flow_control_loop_pipe_sequential_init_U : component seq_align_multiple_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten22_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln168_fu_348_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten22_fu_104 <= add_ln168_5_fu_354_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten22_fu_104 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    max_col_value_24_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln168_fu_348_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    max_col_value_24_fu_96 <= add_ln171_fu_454_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    max_col_value_24_fu_96 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    max_row_value_16_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln168_fu_348_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    max_row_value_16_fu_100 <= select_ln168_1_fu_386_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    max_row_value_16_fu_100 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln168_reg_599 <= icmp_ln168_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln168_reg_599 = ap_const_lv1_0))) then
                max_col_value_1_fu_92 <= max_col_value_fu_548_p3;
                max_row_value_1_fu_88 <= max_row_value_fu_537_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_348_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln168_23_reg_603 <= trunc_ln168_23_fu_394_p1;
                trunc_ln168_24_reg_608 <= trunc_ln168_24_fu_416_p1;
                trunc_ln173_reg_693 <= trunc_ln173_fu_450_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1649_fu_424_p2 <= std_logic_vector(unsigned(tmp_9_fu_408_p3) + unsigned(zext_ln1649_fu_420_p1));
    add_ln168_5_fu_354_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten22_load) + unsigned(ap_const_lv13_1));
    add_ln168_fu_366_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_max_row_value_16_load) + unsigned(ap_const_lv7_1));
    add_ln171_fu_454_p2 <= std_logic_vector(unsigned(select_ln168_fu_378_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln168_fu_348_p2)
    begin
        if (((icmp_ln168_fu_348_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten22_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten22_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten22_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten22_load <= indvar_flatten22_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_max_col_value_24_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, max_col_value_24_fu_96, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_max_col_value_24_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_max_col_value_24_load <= max_col_value_24_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_max_row_value_16_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, max_row_value_16_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_max_row_value_16_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_max_row_value_16_load <= max_row_value_16_fu_100;
        end if; 
    end process;

    dp_matrix_V_10_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_10_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_11_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_11_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_12_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_12_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_13_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_13_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_14_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_14_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_15_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_15_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_1_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_1_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_2_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_2_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_3_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_3_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_4_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_4_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_5_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_5_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_6_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_6_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_7_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_7_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_8_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_8_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_9_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_9_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_matrix_V_address0 <= zext_ln1649_8_fu_430_p1(8 - 1 downto 0);

    dp_matrix_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dp_matrix_V_ce0 <= ap_const_logic_1;
        else 
            dp_matrix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1649_fu_531_p2 <= "0" when (tmp_fu_494_p18 = ap_const_lv9_0) else "1";
    icmp_ln168_fu_348_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten22_load = ap_const_lv13_1000) else "0";
    icmp_ln171_fu_372_p2 <= "1" when (ap_sig_allocacmp_max_col_value_24_load = ap_const_lv7_40) else "0";
    max_col_value_1_out <= max_col_value_1_fu_92(8 - 1 downto 0);

    max_col_value_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln168_reg_599, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln168_reg_599 = ap_const_lv1_1))) then 
            max_col_value_1_out_ap_vld <= ap_const_logic_1;
        else 
            max_col_value_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_col_value_fu_548_p3 <= 
        zext_ln173_fu_545_p1 when (icmp_ln1649_fu_531_p2(0) = '1') else 
        max_col_value_1_fu_92;
    max_row_value_1_out <= max_row_value_1_fu_88(6 - 1 downto 0);

    max_row_value_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln168_reg_599, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln168_reg_599 = ap_const_lv1_1))) then 
            max_row_value_1_out_ap_vld <= ap_const_logic_1;
        else 
            max_row_value_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_row_value_fu_537_p3 <= 
        zext_ln168_fu_491_p1 when (icmp_ln1649_fu_531_p2(0) = '1') else 
        max_row_value_1_fu_88;
    p_cast286_mid2_v_fu_398_p4 <= select_ln168_1_fu_386_p3(5 downto 4);
    select_ln168_1_fu_386_p3 <= 
        add_ln168_fu_366_p2 when (icmp_ln171_fu_372_p2(0) = '1') else 
        ap_sig_allocacmp_max_row_value_16_load;
    select_ln168_fu_378_p3 <= 
        ap_const_lv7_0 when (icmp_ln171_fu_372_p2(0) = '1') else 
        ap_sig_allocacmp_max_col_value_24_load;
    tmp_9_fu_408_p3 <= (p_cast286_mid2_v_fu_398_p4 & ap_const_lv6_0);
    trunc_ln168_23_fu_394_p1 <= select_ln168_1_fu_386_p3(6 - 1 downto 0);
    trunc_ln168_24_fu_416_p1 <= select_ln168_1_fu_386_p3(4 - 1 downto 0);
    trunc_ln173_fu_450_p1 <= select_ln168_fu_378_p3(6 - 1 downto 0);
    zext_ln1649_8_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1649_fu_424_p2),64));
    zext_ln1649_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln168_fu_378_p3),8));
    zext_ln168_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln168_23_reg_603),32));
    zext_ln173_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln173_reg_693),32));
end behav;
