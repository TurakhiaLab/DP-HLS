-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_score : IN STD_LOGIC_VECTOR (15 downto 0);
    max_chunk_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pe_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_score_32_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_33_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_34_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_35_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_36_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_37_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_38_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_39_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_40_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_41_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_42_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_43_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_44_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_45_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_46_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_47_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_48_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_49_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_50_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_51_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_52_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_53_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_54_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_55_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_56_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_57_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_58_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_59_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_60_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_61_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_score_62_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_max_chunk_offset_32_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_33_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_34_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_35_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_36_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_37_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_38_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_39_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_40_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_41_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_42_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_43_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_44_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_45_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_46_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_47_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_48_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_49_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_50_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_51_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_52_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_53_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_54_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_55_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_56_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_57_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_58_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_59_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_60_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_61_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_chunk_offset_62_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_32_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_33_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_34_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_35_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_36_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_37_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_38_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_39_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_40_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_41_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_42_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_43_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_44_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_45_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_46_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_47_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_48_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_49_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_50_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_51_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_52_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_53_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_54_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_55_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_56_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_57_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_58_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_59_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_60_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_61_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_max_pe_offset_62_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_chunk_offset_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_chunk_offset_1_out_ap_vld : OUT STD_LOGIC;
    max_pe_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pe_1_out_ap_vld : OUT STD_LOGIC;
    max_pe_offset_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pe_offset_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln463_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal local_max_pe_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal local_max_pe_ce0 : STD_LOGIC;
    signal local_max_pe_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln465_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln465_reg_1640 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal max_pe_offset_1_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pe_offset_3_fu_1044_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal max_pe_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pe_2_fu_1095_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_chunk_offset_1_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_chunk_offset_3_fu_1052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_score_1_fu_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_score_3_fu_1060_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_fu_252 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln463_fu_900_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln462_fu_920_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal max_score_2_fu_924_p34 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_pe_offset_2_fu_1006_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_chunk_offset_2_fu_968_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln467_fu_1091_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component seq_align_multiple_static_mux_32_5_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component seq_align_multiple_static_mux_32_5_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1_local_max_pe_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component seq_align_multiple_static_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    local_max_pe_U : component seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1_local_max_pe_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_max_pe_address0,
        ce0 => local_max_pe_ce0,
        q0 => local_max_pe_q0);

    mux_32_5_16_1_1_U674 : component seq_align_multiple_static_mux_32_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => max_score,
        din1 => local_max_score_32_2,
        din2 => local_max_score_33_2,
        din3 => local_max_score_34_2,
        din4 => local_max_score_35_2,
        din5 => local_max_score_36_2,
        din6 => local_max_score_37_2,
        din7 => local_max_score_38_2,
        din8 => local_max_score_39_2,
        din9 => local_max_score_40_2,
        din10 => local_max_score_41_2,
        din11 => local_max_score_42_2,
        din12 => local_max_score_43_2,
        din13 => local_max_score_44_2,
        din14 => local_max_score_45_2,
        din15 => local_max_score_46_2,
        din16 => local_max_score_47_2,
        din17 => local_max_score_48_2,
        din18 => local_max_score_49_2,
        din19 => local_max_score_50_2,
        din20 => local_max_score_51_2,
        din21 => local_max_score_52_2,
        din22 => local_max_score_53_2,
        din23 => local_max_score_54_2,
        din24 => local_max_score_55_2,
        din25 => local_max_score_56_2,
        din26 => local_max_score_57_2,
        din27 => local_max_score_58_2,
        din28 => local_max_score_59_2,
        din29 => local_max_score_60_2,
        din30 => local_max_score_61_2,
        din31 => local_max_score_62_2,
        din32 => trunc_ln462_fu_920_p1,
        dout => max_score_2_fu_924_p34);

    mux_32_5_32_1_1_U675 : component seq_align_multiple_static_mux_32_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => max_chunk_offset,
        din1 => local_max_chunk_offset_32_2,
        din2 => local_max_chunk_offset_33_2,
        din3 => local_max_chunk_offset_34_2,
        din4 => local_max_chunk_offset_35_2,
        din5 => local_max_chunk_offset_36_2,
        din6 => local_max_chunk_offset_37_2,
        din7 => local_max_chunk_offset_38_2,
        din8 => local_max_chunk_offset_39_2,
        din9 => local_max_chunk_offset_40_2,
        din10 => local_max_chunk_offset_41_2,
        din11 => local_max_chunk_offset_42_2,
        din12 => local_max_chunk_offset_43_2,
        din13 => local_max_chunk_offset_44_2,
        din14 => local_max_chunk_offset_45_2,
        din15 => local_max_chunk_offset_46_2,
        din16 => local_max_chunk_offset_47_2,
        din17 => local_max_chunk_offset_48_2,
        din18 => local_max_chunk_offset_49_2,
        din19 => local_max_chunk_offset_50_2,
        din20 => local_max_chunk_offset_51_2,
        din21 => local_max_chunk_offset_52_2,
        din22 => local_max_chunk_offset_53_2,
        din23 => local_max_chunk_offset_54_2,
        din24 => local_max_chunk_offset_55_2,
        din25 => local_max_chunk_offset_56_2,
        din26 => local_max_chunk_offset_57_2,
        din27 => local_max_chunk_offset_58_2,
        din28 => local_max_chunk_offset_59_2,
        din29 => local_max_chunk_offset_60_2,
        din30 => local_max_chunk_offset_61_2,
        din31 => local_max_chunk_offset_62_2,
        din32 => trunc_ln462_fu_920_p1,
        dout => max_chunk_offset_2_fu_968_p34);

    mux_32_5_32_1_1_U676 : component seq_align_multiple_static_mux_32_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => max_pe_offset,
        din1 => local_max_pe_offset_32_2,
        din2 => local_max_pe_offset_33_2,
        din3 => local_max_pe_offset_34_2,
        din4 => local_max_pe_offset_35_2,
        din5 => local_max_pe_offset_36_2,
        din6 => local_max_pe_offset_37_2,
        din7 => local_max_pe_offset_38_2,
        din8 => local_max_pe_offset_39_2,
        din9 => local_max_pe_offset_40_2,
        din10 => local_max_pe_offset_41_2,
        din11 => local_max_pe_offset_42_2,
        din12 => local_max_pe_offset_43_2,
        din13 => local_max_pe_offset_44_2,
        din14 => local_max_pe_offset_45_2,
        din15 => local_max_pe_offset_46_2,
        din16 => local_max_pe_offset_47_2,
        din17 => local_max_pe_offset_48_2,
        din18 => local_max_pe_offset_49_2,
        din19 => local_max_pe_offset_50_2,
        din20 => local_max_pe_offset_51_2,
        din21 => local_max_pe_offset_52_2,
        din22 => local_max_pe_offset_53_2,
        din23 => local_max_pe_offset_54_2,
        din24 => local_max_pe_offset_55_2,
        din25 => local_max_pe_offset_56_2,
        din26 => local_max_pe_offset_57_2,
        din27 => local_max_pe_offset_58_2,
        din28 => local_max_pe_offset_59_2,
        din29 => local_max_pe_offset_60_2,
        din30 => local_max_pe_offset_61_2,
        din31 => local_max_pe_offset_62_2,
        din32 => trunc_ln462_fu_920_p1,
        dout => max_pe_offset_2_fu_1006_p34);

    flow_control_loop_pipe_sequential_init_U : component seq_align_multiple_static_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_2_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_252 <= ap_const_lv6_0;
                elsif (((icmp_ln463_fu_894_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_2_fu_252 <= add_ln463_fu_900_p2;
                end if;
            end if; 
        end if;
    end process;

    max_chunk_offset_1_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    max_chunk_offset_1_fu_244 <= max_chunk_offset;
                elsif (((icmp_ln463_fu_894_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    max_chunk_offset_1_fu_244 <= max_chunk_offset_3_fu_1052_p3;
                end if;
            end if; 
        end if;
    end process;

    max_pe_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    max_pe_fu_240 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    max_pe_fu_240 <= max_pe_2_fu_1095_p3;
                end if;
            end if; 
        end if;
    end process;

    max_pe_offset_1_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    max_pe_offset_1_fu_236 <= max_pe_offset;
                elsif (((icmp_ln463_fu_894_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    max_pe_offset_1_fu_236 <= max_pe_offset_3_fu_1044_p3;
                end if;
            end if; 
        end if;
    end process;

    max_score_1_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    max_score_1_fu_248 <= max_score;
                elsif (((icmp_ln463_fu_894_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    max_score_1_fu_248 <= max_score_3_fu_1060_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln463_fu_894_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln465_reg_1640 <= icmp_ln465_fu_962_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln463_fu_900_p2 <= std_logic_vector(unsigned(i_2_fu_252) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln463_fu_894_p2)
    begin
        if (((icmp_ln463_fu_894_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_252),64));
    icmp_ln463_fu_894_p2 <= "1" when (i_2_fu_252 = ap_const_lv6_20) else "0";
    icmp_ln465_fu_962_p2 <= "1" when (signed(max_score_2_fu_924_p34) > signed(max_score_1_fu_248)) else "0";
    local_max_pe_address0 <= i_2_cast_fu_915_p1(5 - 1 downto 0);

    local_max_pe_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_max_pe_ce0 <= ap_const_logic_1;
        else 
            local_max_pe_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_chunk_offset_1_out <= max_chunk_offset_1_fu_244;

    max_chunk_offset_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_894_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_894_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_chunk_offset_1_out_ap_vld <= ap_const_logic_1;
        else 
            max_chunk_offset_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_chunk_offset_3_fu_1052_p3 <= 
        max_chunk_offset_2_fu_968_p34 when (icmp_ln465_fu_962_p2(0) = '1') else 
        max_chunk_offset_1_fu_244;
    max_pe_1_out <= max_pe_fu_240;

    max_pe_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_894_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_894_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_pe_1_out_ap_vld <= ap_const_logic_1;
        else 
            max_pe_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_pe_2_fu_1095_p3 <= 
        zext_ln467_fu_1091_p1 when (icmp_ln465_reg_1640(0) = '1') else 
        max_pe_fu_240;
    max_pe_offset_1_out <= max_pe_offset_1_fu_236;

    max_pe_offset_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_894_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_894_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_pe_offset_1_out_ap_vld <= ap_const_logic_1;
        else 
            max_pe_offset_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_pe_offset_3_fu_1044_p3 <= 
        max_pe_offset_2_fu_1006_p34 when (icmp_ln465_fu_962_p2(0) = '1') else 
        max_pe_offset_1_fu_236;
    max_score_3_fu_1060_p3 <= 
        max_score_2_fu_924_p34 when (icmp_ln465_fu_962_p2(0) = '1') else 
        max_score_1_fu_248;
    trunc_ln462_fu_920_p1 <= i_2_fu_252(5 - 1 downto 0);
    zext_ln467_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(local_max_pe_q0),32));
end behav;
