// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module seq_align_multiple_static_Traceback_Pipeline_traceback_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        max_col,
        max_row,
        zext_ln30,
        tbmat_0_address0,
        tbmat_0_ce0,
        tbmat_0_q0,
        tbmat_1_address0,
        tbmat_1_ce0,
        tbmat_1_q0,
        tbmat_2_address0,
        tbmat_2_ce0,
        tbmat_2_q0,
        tbmat_3_address0,
        tbmat_3_ce0,
        tbmat_3_q0,
        tbmat_4_address0,
        tbmat_4_ce0,
        tbmat_4_q0,
        tbmat_5_address0,
        tbmat_5_ce0,
        tbmat_5_q0,
        tbmat_6_address0,
        tbmat_6_ce0,
        tbmat_6_q0,
        tbmat_7_address0,
        tbmat_7_ce0,
        tbmat_7_q0,
        tbmat_8_address0,
        tbmat_8_ce0,
        tbmat_8_q0,
        tbmat_9_address0,
        tbmat_9_ce0,
        tbmat_9_q0,
        tbmat_10_address0,
        tbmat_10_ce0,
        tbmat_10_q0,
        tbmat_11_address0,
        tbmat_11_ce0,
        tbmat_11_q0,
        tbmat_12_address0,
        tbmat_12_ce0,
        tbmat_12_q0,
        tbmat_13_address0,
        tbmat_13_ce0,
        tbmat_13_q0,
        tbmat_14_address0,
        tbmat_14_ce0,
        tbmat_14_q0,
        tbmat_15_address0,
        tbmat_15_ce0,
        tbmat_15_q0,
        tbmat_16_address0,
        tbmat_16_ce0,
        tbmat_16_q0,
        tbmat_17_address0,
        tbmat_17_ce0,
        tbmat_17_q0,
        tbmat_18_address0,
        tbmat_18_ce0,
        tbmat_18_q0,
        tbmat_19_address0,
        tbmat_19_ce0,
        tbmat_19_q0,
        tbmat_20_address0,
        tbmat_20_ce0,
        tbmat_20_q0,
        tbmat_21_address0,
        tbmat_21_ce0,
        tbmat_21_q0,
        tbmat_22_address0,
        tbmat_22_ce0,
        tbmat_22_q0,
        tbmat_23_address0,
        tbmat_23_ce0,
        tbmat_23_q0,
        tbmat_24_address0,
        tbmat_24_ce0,
        tbmat_24_q0,
        tbmat_25_address0,
        tbmat_25_ce0,
        tbmat_25_q0,
        tbmat_26_address0,
        tbmat_26_ce0,
        tbmat_26_q0,
        tbmat_27_address0,
        tbmat_27_ce0,
        tbmat_27_q0,
        tbmat_28_address0,
        tbmat_28_ce0,
        tbmat_28_q0,
        tbmat_29_address0,
        tbmat_29_ce0,
        tbmat_29_q0,
        tbmat_30_address0,
        tbmat_30_ce0,
        tbmat_30_q0,
        tbmat_31_address0,
        tbmat_31_ce0,
        tbmat_31_q0,
        traceback_out,
        trunc_ln30_1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] max_col;
input  [31:0] max_row;
input  [1:0] zext_ln30;
output  [10:0] tbmat_0_address0;
output   tbmat_0_ce0;
input  [2:0] tbmat_0_q0;
output  [10:0] tbmat_1_address0;
output   tbmat_1_ce0;
input  [2:0] tbmat_1_q0;
output  [10:0] tbmat_2_address0;
output   tbmat_2_ce0;
input  [2:0] tbmat_2_q0;
output  [10:0] tbmat_3_address0;
output   tbmat_3_ce0;
input  [2:0] tbmat_3_q0;
output  [10:0] tbmat_4_address0;
output   tbmat_4_ce0;
input  [2:0] tbmat_4_q0;
output  [10:0] tbmat_5_address0;
output   tbmat_5_ce0;
input  [2:0] tbmat_5_q0;
output  [10:0] tbmat_6_address0;
output   tbmat_6_ce0;
input  [2:0] tbmat_6_q0;
output  [10:0] tbmat_7_address0;
output   tbmat_7_ce0;
input  [2:0] tbmat_7_q0;
output  [10:0] tbmat_8_address0;
output   tbmat_8_ce0;
input  [2:0] tbmat_8_q0;
output  [10:0] tbmat_9_address0;
output   tbmat_9_ce0;
input  [2:0] tbmat_9_q0;
output  [10:0] tbmat_10_address0;
output   tbmat_10_ce0;
input  [2:0] tbmat_10_q0;
output  [10:0] tbmat_11_address0;
output   tbmat_11_ce0;
input  [2:0] tbmat_11_q0;
output  [10:0] tbmat_12_address0;
output   tbmat_12_ce0;
input  [2:0] tbmat_12_q0;
output  [10:0] tbmat_13_address0;
output   tbmat_13_ce0;
input  [2:0] tbmat_13_q0;
output  [10:0] tbmat_14_address0;
output   tbmat_14_ce0;
input  [2:0] tbmat_14_q0;
output  [10:0] tbmat_15_address0;
output   tbmat_15_ce0;
input  [2:0] tbmat_15_q0;
output  [10:0] tbmat_16_address0;
output   tbmat_16_ce0;
input  [2:0] tbmat_16_q0;
output  [10:0] tbmat_17_address0;
output   tbmat_17_ce0;
input  [2:0] tbmat_17_q0;
output  [10:0] tbmat_18_address0;
output   tbmat_18_ce0;
input  [2:0] tbmat_18_q0;
output  [10:0] tbmat_19_address0;
output   tbmat_19_ce0;
input  [2:0] tbmat_19_q0;
output  [10:0] tbmat_20_address0;
output   tbmat_20_ce0;
input  [2:0] tbmat_20_q0;
output  [10:0] tbmat_21_address0;
output   tbmat_21_ce0;
input  [2:0] tbmat_21_q0;
output  [10:0] tbmat_22_address0;
output   tbmat_22_ce0;
input  [2:0] tbmat_22_q0;
output  [10:0] tbmat_23_address0;
output   tbmat_23_ce0;
input  [2:0] tbmat_23_q0;
output  [10:0] tbmat_24_address0;
output   tbmat_24_ce0;
input  [2:0] tbmat_24_q0;
output  [10:0] tbmat_25_address0;
output   tbmat_25_ce0;
input  [2:0] tbmat_25_q0;
output  [10:0] tbmat_26_address0;
output   tbmat_26_ce0;
input  [2:0] tbmat_26_q0;
output  [10:0] tbmat_27_address0;
output   tbmat_27_ce0;
input  [2:0] tbmat_27_q0;
output  [10:0] tbmat_28_address0;
output   tbmat_28_ce0;
input  [2:0] tbmat_28_q0;
output  [10:0] tbmat_29_address0;
output   tbmat_29_ce0;
input  [2:0] tbmat_29_q0;
output  [10:0] tbmat_30_address0;
output   tbmat_30_ce0;
input  [2:0] tbmat_30_q0;
output  [10:0] tbmat_31_address0;
output   tbmat_31_ce0;
input  [2:0] tbmat_31_q0;
input  [63:0] traceback_out;
input  [1:0] trunc_ln30_1;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg[3:0] m_axi_gmem_WSTRB;
reg m_axi_gmem_BREADY;
reg tbmat_0_ce0;
reg tbmat_1_ce0;
reg tbmat_2_ce0;
reg tbmat_3_ce0;
reg tbmat_4_ce0;
reg tbmat_5_ce0;
reg tbmat_6_ce0;
reg tbmat_7_ce0;
reg tbmat_8_ce0;
reg tbmat_9_ce0;
reg tbmat_10_ce0;
reg tbmat_11_ce0;
reg tbmat_12_ce0;
reg tbmat_13_ce0;
reg tbmat_14_ce0;
reg tbmat_15_ce0;
reg tbmat_16_ce0;
reg tbmat_17_ce0;
reg tbmat_18_ce0;
reg tbmat_19_ce0;
reg tbmat_20_ce0;
reg tbmat_21_ce0;
reg tbmat_22_ce0;
reg tbmat_23_ce0;
reg tbmat_24_ce0;
reg tbmat_25_ce0;
reg tbmat_26_ce0;
reg tbmat_27_ce0;
reg tbmat_28_ce0;
reg tbmat_29_ce0;
reg tbmat_30_ce0;
reg tbmat_31_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg   [0:0] or_ln28_1_reg_1275;
reg    ap_block_state4_io;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_state24_pp0_stage1_iter11;
wire    ap_block_state26_pp0_stage1_iter12;
wire    ap_block_state28_pp0_stage1_iter13;
wire    ap_block_state30_pp0_stage1_iter14;
wire    ap_block_state32_pp0_stage1_iter15;
wire    ap_block_state34_pp0_stage1_iter16;
wire    ap_block_state36_pp0_stage1_iter17;
wire    ap_block_state38_pp0_stage1_iter18;
wire    ap_block_state40_pp0_stage1_iter19;
wire    ap_block_state42_pp0_stage1_iter20;
wire    ap_block_state44_pp0_stage1_iter21;
wire    ap_block_state46_pp0_stage1_iter22;
wire    ap_block_state48_pp0_stage1_iter23;
wire    ap_block_state50_pp0_stage1_iter24;
wire    ap_block_state52_pp0_stage1_iter25;
wire    ap_block_state54_pp0_stage1_iter26;
wire    ap_block_state56_pp0_stage1_iter27;
wire    ap_block_state58_pp0_stage1_iter28;
wire    ap_block_state60_pp0_stage1_iter29;
wire    ap_block_state62_pp0_stage1_iter30;
wire    ap_block_state64_pp0_stage1_iter31;
wire    ap_block_state66_pp0_stage1_iter32;
wire    ap_block_state68_pp0_stage1_iter33;
wire    ap_block_state70_pp0_stage1_iter34;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter34_reg;
reg    ap_block_state72_pp0_stage1_iter35;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln26_fu_721_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AW;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln26_reg_1271;
reg    gmem_blk_n_W;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_B;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op240_writereq_state3;
reg    ap_predicate_op251_writereq_state3;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
wire    ap_block_state25_pp0_stage0_iter12;
wire    ap_block_state27_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state31_pp0_stage0_iter15;
wire    ap_block_state33_pp0_stage0_iter16;
wire    ap_block_state35_pp0_stage0_iter17;
wire    ap_block_state37_pp0_stage0_iter18;
wire    ap_block_state39_pp0_stage0_iter19;
wire    ap_block_state41_pp0_stage0_iter20;
wire    ap_block_state43_pp0_stage0_iter21;
wire    ap_block_state45_pp0_stage0_iter22;
wire    ap_block_state47_pp0_stage0_iter23;
wire    ap_block_state49_pp0_stage0_iter24;
wire    ap_block_state51_pp0_stage0_iter25;
wire    ap_block_state53_pp0_stage0_iter26;
wire    ap_block_state55_pp0_stage0_iter27;
wire    ap_block_state57_pp0_stage0_iter28;
wire    ap_block_state59_pp0_stage0_iter29;
wire    ap_block_state61_pp0_stage0_iter30;
wire    ap_block_state63_pp0_stage0_iter31;
wire    ap_block_state65_pp0_stage0_iter32;
wire    ap_block_state67_pp0_stage0_iter33;
wire    ap_block_state69_pp0_stage0_iter34;
wire    ap_block_state71_pp0_stage0_iter35;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] row_4_reg_1258;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] col_4_reg_1265;
wire   [0:0] or_ln28_1_fu_755_p2;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter1_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter2_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter3_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter4_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter5_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter6_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter7_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter8_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter9_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter10_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter11_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter12_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter13_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter14_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter15_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter16_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter17_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter18_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter19_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter20_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter21_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter22_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter23_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter24_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter25_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter26_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter27_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter28_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter29_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter30_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter31_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter32_reg;
reg   [0:0] or_ln28_1_reg_1275_pp0_iter33_reg;
wire   [1:0] add_ln30_1_fu_829_p2;
reg   [1:0] add_ln30_1_reg_1439;
wire   [3:0] shl_ln30_fu_838_p2;
reg   [3:0] shl_ln30_reg_1444;
reg   [63:0] gmem_addr_2_reg_1449;
wire   [3:0] shl_ln34_fu_867_p2;
reg   [3:0] shl_ln34_reg_1455;
reg   [63:0] gmem_addr_reg_1460;
reg   [31:0] state_1_reg_1466;
wire   [2:0] tbp_fu_894_p34;
reg   [2:0] tbp_reg_1471;
wire   [0:0] icmp_ln232_fu_964_p2;
reg   [0:0] icmp_ln232_reg_1476;
wire   [0:0] icmp_ln232_1_fu_978_p2;
reg   [0:0] icmp_ln232_1_reg_1482;
wire   [0:0] icmp_ln232_2_fu_984_p2;
reg   [0:0] icmp_ln232_2_reg_1487;
wire   [25:0] shl_ln30_2_fu_1027_p2;
reg   [25:0] shl_ln30_2_reg_1493;
wire   [31:0] row_5_fu_1037_p2;
reg   [31:0] row_5_reg_1498;
wire   [31:0] col_5_fu_1042_p2;
reg   [31:0] col_5_reg_1504;
wire   [0:0] state_5_fu_1047_p2;
reg   [0:0] state_5_reg_1510;
wire   [0:0] and_ln149_fu_1059_p2;
reg   [0:0] and_ln149_reg_1515;
wire   [0:0] icmp_ln149_1_fu_1065_p2;
reg   [0:0] icmp_ln149_1_reg_1522;
wire   [0:0] icmp_ln147_fu_1071_p2;
reg   [0:0] icmp_ln147_reg_1527;
wire   [0:0] icmp_ln147_1_fu_1077_p2;
reg   [0:0] icmp_ln147_1_reg_1532;
wire   [0:0] icmp_ln147_2_fu_1083_p2;
reg   [0:0] icmp_ln147_2_reg_1537;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln29_fu_789_p1;
wire  signed [63:0] sext_ln30_fu_844_p1;
wire  signed [63:0] sext_ln34_fu_873_p1;
wire   [31:0] zext_ln30_4_fu_1089_p1;
reg    ap_block_pp0_stage1_01001;
reg   [9:0] i_fu_172;
wire   [9:0] add_ln26_fu_727_p2;
wire    ap_loop_init;
reg   [0:0] end_fu_176;
wire   [0:0] icmp_ln32_fu_1186_p2;
reg   [0:0] ap_sig_allocacmp_end_load;
reg   [31:0] state_fu_180;
wire   [31:0] state_6_fu_1179_p3;
wire   [31:0] zext_ln30_cast_fu_683_p1;
reg   [31:0] row_fu_184;
wire   [31:0] row_7_fu_1116_p3;
reg   [31:0] ap_sig_allocacmp_row_4;
reg   [31:0] col_fu_188;
wire   [31:0] col_7_fu_1105_p3;
reg   [31:0] ap_sig_allocacmp_col_4;
wire   [63:0] i_cast_fu_736_p1;
wire   [63:0] grp_fu_669_p2;
wire   [31:0] or_ln28_fu_741_p2;
wire   [0:0] tmp_fu_747_p3;
wire   [2:0] lshr_ln1_fu_761_p4;
wire   [10:0] tmp_1_fu_771_p3;
wire   [10:0] trunc_ln29_fu_779_p1;
wire   [10:0] add_ln29_fu_783_p2;
wire   [1:0] trunc_ln30_fu_825_p1;
wire   [3:0] zext_ln30_1_fu_834_p1;
wire   [61:0] grp_fu_673_p4;
wire   [1:0] trunc_ln34_fu_854_p1;
wire   [1:0] add_ln34_1_fu_858_p2;
wire   [3:0] zext_ln34_fu_863_p1;
wire   [4:0] tbp_fu_894_p33;
wire   [0:0] or_ln232_fu_998_p2;
wire   [1:0] select_ln232_fu_990_p3;
wire   [1:0] select_ln232_2_fu_970_p3;
wire   [1:0] select_ln232_1_fu_1004_p3;
wire   [4:0] shl_ln30_1_fu_1016_p3;
wire   [25:0] zext_ln30_2_fu_1012_p1;
wire   [25:0] zext_ln30_3_fu_1023_p1;
wire   [1:0] trunc_ln149_fu_1033_p1;
wire   [0:0] icmp_ln149_fu_1053_p2;
wire   [31:0] col_6_fu_1100_p3;
wire   [31:0] row_6_fu_1111_p3;
wire   [0:0] xor_ln147_fu_1122_p2;
wire   [0:0] state_4_fu_1093_p3;
wire   [0:0] and_ln147_fu_1127_p2;
wire   [0:0] select_ln147_fu_1132_p3;
wire   [0:0] xor_ln149_fu_1139_p2;
wire   [0:0] and_ln149_1_fu_1144_p2;
wire   [0:0] and_ln149_2_fu_1154_p2;
wire   [1:0] zext_ln149_fu_1150_p1;
wire   [1:0] select_ln149_fu_1158_p3;
wire   [0:0] and_ln147_1_fu_1170_p2;
wire   [0:0] and_ln147_2_fu_1174_p2;
wire   [31:0] zext_ln147_fu_1166_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to35;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_832;
reg    ap_condition_846;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

seq_align_multiple_static_mux_32_5_3_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 3 ),
    .din3_WIDTH( 3 ),
    .din4_WIDTH( 3 ),
    .din5_WIDTH( 3 ),
    .din6_WIDTH( 3 ),
    .din7_WIDTH( 3 ),
    .din8_WIDTH( 3 ),
    .din9_WIDTH( 3 ),
    .din10_WIDTH( 3 ),
    .din11_WIDTH( 3 ),
    .din12_WIDTH( 3 ),
    .din13_WIDTH( 3 ),
    .din14_WIDTH( 3 ),
    .din15_WIDTH( 3 ),
    .din16_WIDTH( 3 ),
    .din17_WIDTH( 3 ),
    .din18_WIDTH( 3 ),
    .din19_WIDTH( 3 ),
    .din20_WIDTH( 3 ),
    .din21_WIDTH( 3 ),
    .din22_WIDTH( 3 ),
    .din23_WIDTH( 3 ),
    .din24_WIDTH( 3 ),
    .din25_WIDTH( 3 ),
    .din26_WIDTH( 3 ),
    .din27_WIDTH( 3 ),
    .din28_WIDTH( 3 ),
    .din29_WIDTH( 3 ),
    .din30_WIDTH( 3 ),
    .din31_WIDTH( 3 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 3 ))
mux_32_5_3_1_1_U779(
    .din0(tbmat_0_q0),
    .din1(tbmat_1_q0),
    .din2(tbmat_2_q0),
    .din3(tbmat_3_q0),
    .din4(tbmat_4_q0),
    .din5(tbmat_5_q0),
    .din6(tbmat_6_q0),
    .din7(tbmat_7_q0),
    .din8(tbmat_8_q0),
    .din9(tbmat_9_q0),
    .din10(tbmat_10_q0),
    .din11(tbmat_11_q0),
    .din12(tbmat_12_q0),
    .din13(tbmat_13_q0),
    .din14(tbmat_14_q0),
    .din15(tbmat_15_q0),
    .din16(tbmat_16_q0),
    .din17(tbmat_17_q0),
    .din18(tbmat_18_q0),
    .din19(tbmat_19_q0),
    .din20(tbmat_20_q0),
    .din21(tbmat_21_q0),
    .din22(tbmat_22_q0),
    .din23(tbmat_23_q0),
    .din24(tbmat_24_q0),
    .din25(tbmat_25_q0),
    .din26(tbmat_26_q0),
    .din27(tbmat_27_q0),
    .din28(tbmat_28_q0),
    .din29(tbmat_29_q0),
    .din30(tbmat_30_q0),
    .din31(tbmat_31_q0),
    .din32(tbp_fu_894_p33),
    .dout(tbp_fu_894_p34)
);

seq_align_multiple_static_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter34_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_fu_188 <= max_col;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        col_fu_188 <= col_7_fu_1105_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_fu_176 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        end_fu_176 <= icmp_ln32_fu_1186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_172 <= 10'd0;
    end else if (((icmp_ln26_fu_721_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_172 <= add_ln26_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_fu_184 <= max_row;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        row_fu_184 <= row_7_fu_1116_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_fu_180 <= zext_ln30_cast_fu_683_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        state_fu_180 <= state_6_fu_1179_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln28_1_fu_755_p2 == 1'd0) & (icmp_ln26_fu_721_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln30_1_reg_1439 <= add_ln30_1_fu_829_p2;
        gmem_addr_2_reg_1449 <= sext_ln30_fu_844_p1;
        shl_ln30_reg_1444 <= shl_ln30_fu_838_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1271 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln28_1_reg_1275 == 1'd0))) begin
        and_ln149_reg_1515 <= and_ln149_fu_1059_p2;
        col_5_reg_1504 <= col_5_fu_1042_p2;
        icmp_ln147_1_reg_1532 <= icmp_ln147_1_fu_1077_p2;
        icmp_ln147_2_reg_1537 <= icmp_ln147_2_fu_1083_p2;
        icmp_ln147_reg_1527 <= icmp_ln147_fu_1071_p2;
        icmp_ln149_1_reg_1522 <= icmp_ln149_1_fu_1065_p2;
        icmp_ln232_1_reg_1482 <= icmp_ln232_1_fu_978_p2;
        icmp_ln232_2_reg_1487 <= icmp_ln232_2_fu_984_p2;
        icmp_ln232_reg_1476 <= icmp_ln232_fu_964_p2;
        row_5_reg_1498 <= row_5_fu_1037_p2;
        shl_ln30_2_reg_1493 <= shl_ln30_2_fu_1027_p2;
        state_5_reg_1510 <= state_5_fu_1047_p2;
        tbp_reg_1471 <= tbp_fu_894_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        col_4_reg_1265 <= ap_sig_allocacmp_col_4;
        icmp_ln26_reg_1271 <= icmp_ln26_fu_721_p2;
        or_ln28_1_reg_1275_pp0_iter10_reg <= or_ln28_1_reg_1275_pp0_iter9_reg;
        or_ln28_1_reg_1275_pp0_iter11_reg <= or_ln28_1_reg_1275_pp0_iter10_reg;
        or_ln28_1_reg_1275_pp0_iter12_reg <= or_ln28_1_reg_1275_pp0_iter11_reg;
        or_ln28_1_reg_1275_pp0_iter13_reg <= or_ln28_1_reg_1275_pp0_iter12_reg;
        or_ln28_1_reg_1275_pp0_iter14_reg <= or_ln28_1_reg_1275_pp0_iter13_reg;
        or_ln28_1_reg_1275_pp0_iter15_reg <= or_ln28_1_reg_1275_pp0_iter14_reg;
        or_ln28_1_reg_1275_pp0_iter16_reg <= or_ln28_1_reg_1275_pp0_iter15_reg;
        or_ln28_1_reg_1275_pp0_iter17_reg <= or_ln28_1_reg_1275_pp0_iter16_reg;
        or_ln28_1_reg_1275_pp0_iter18_reg <= or_ln28_1_reg_1275_pp0_iter17_reg;
        or_ln28_1_reg_1275_pp0_iter19_reg <= or_ln28_1_reg_1275_pp0_iter18_reg;
        or_ln28_1_reg_1275_pp0_iter1_reg <= or_ln28_1_reg_1275;
        or_ln28_1_reg_1275_pp0_iter20_reg <= or_ln28_1_reg_1275_pp0_iter19_reg;
        or_ln28_1_reg_1275_pp0_iter21_reg <= or_ln28_1_reg_1275_pp0_iter20_reg;
        or_ln28_1_reg_1275_pp0_iter22_reg <= or_ln28_1_reg_1275_pp0_iter21_reg;
        or_ln28_1_reg_1275_pp0_iter23_reg <= or_ln28_1_reg_1275_pp0_iter22_reg;
        or_ln28_1_reg_1275_pp0_iter24_reg <= or_ln28_1_reg_1275_pp0_iter23_reg;
        or_ln28_1_reg_1275_pp0_iter25_reg <= or_ln28_1_reg_1275_pp0_iter24_reg;
        or_ln28_1_reg_1275_pp0_iter26_reg <= or_ln28_1_reg_1275_pp0_iter25_reg;
        or_ln28_1_reg_1275_pp0_iter27_reg <= or_ln28_1_reg_1275_pp0_iter26_reg;
        or_ln28_1_reg_1275_pp0_iter28_reg <= or_ln28_1_reg_1275_pp0_iter27_reg;
        or_ln28_1_reg_1275_pp0_iter29_reg <= or_ln28_1_reg_1275_pp0_iter28_reg;
        or_ln28_1_reg_1275_pp0_iter2_reg <= or_ln28_1_reg_1275_pp0_iter1_reg;
        or_ln28_1_reg_1275_pp0_iter30_reg <= or_ln28_1_reg_1275_pp0_iter29_reg;
        or_ln28_1_reg_1275_pp0_iter31_reg <= or_ln28_1_reg_1275_pp0_iter30_reg;
        or_ln28_1_reg_1275_pp0_iter32_reg <= or_ln28_1_reg_1275_pp0_iter31_reg;
        or_ln28_1_reg_1275_pp0_iter33_reg <= or_ln28_1_reg_1275_pp0_iter32_reg;
        or_ln28_1_reg_1275_pp0_iter34_reg <= or_ln28_1_reg_1275_pp0_iter33_reg;
        or_ln28_1_reg_1275_pp0_iter3_reg <= or_ln28_1_reg_1275_pp0_iter2_reg;
        or_ln28_1_reg_1275_pp0_iter4_reg <= or_ln28_1_reg_1275_pp0_iter3_reg;
        or_ln28_1_reg_1275_pp0_iter5_reg <= or_ln28_1_reg_1275_pp0_iter4_reg;
        or_ln28_1_reg_1275_pp0_iter6_reg <= or_ln28_1_reg_1275_pp0_iter5_reg;
        or_ln28_1_reg_1275_pp0_iter7_reg <= or_ln28_1_reg_1275_pp0_iter6_reg;
        or_ln28_1_reg_1275_pp0_iter8_reg <= or_ln28_1_reg_1275_pp0_iter7_reg;
        or_ln28_1_reg_1275_pp0_iter9_reg <= or_ln28_1_reg_1275_pp0_iter8_reg;
        row_4_reg_1258 <= ap_sig_allocacmp_row_4;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln28_1_fu_755_p2 == 1'd1) & (icmp_ln26_fu_721_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_addr_reg_1460 <= sext_ln34_fu_873_p1;
        shl_ln34_reg_1455 <= shl_ln34_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_721_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln28_1_reg_1275 <= or_ln28_1_fu_755_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_1_reg_1466 <= state_fu_180;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_721_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_1271 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter34_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) 
    & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) 
    & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0_1to35 = 1'b1;
    end else begin
        ap_idle_pp0_1to35 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        ap_sig_allocacmp_col_4 = col_7_fu_1105_p3;
    end else begin
        ap_sig_allocacmp_col_4 = col_fu_188;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        ap_sig_allocacmp_end_load = icmp_ln32_fu_1186_p2;
    end else begin
        ap_sig_allocacmp_end_load = end_fu_176;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0))) begin
        ap_sig_allocacmp_row_4 = row_7_fu_1116_p3;
    end else begin
        ap_sig_allocacmp_row_4 = row_fu_184;
    end
end

always @ (*) begin
    if ((((icmp_ln26_reg_1271 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln28_1_reg_1275 == 1'd1)) | ((icmp_ln26_reg_1271 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln28_1_reg_1275 == 1'd0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (or_ln28_1_reg_1275_pp0_iter34_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (or_ln28_1_reg_1275_pp0_iter34_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_832)) begin
        if ((ap_predicate_op251_writereq_state3 == 1'b1)) begin
            m_axi_gmem_AWADDR = gmem_addr_reg_1460;
        end else if ((ap_predicate_op240_writereq_state3 == 1'b1)) begin
            m_axi_gmem_AWADDR = gmem_addr_2_reg_1449;
        end else begin
            m_axi_gmem_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op251_writereq_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_predicate_op240_writereq_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (or_ln28_1_reg_1275_pp0_iter34_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (or_ln28_1_reg_1275_pp0_iter34_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_846)) begin
        if ((or_ln28_1_reg_1275 == 1'd1)) begin
            m_axi_gmem_WDATA = 32'd0;
        end else if ((or_ln28_1_reg_1275 == 1'd0)) begin
            m_axi_gmem_WDATA = zext_ln30_4_fu_1089_p1;
        end else begin
            m_axi_gmem_WDATA = 'bx;
        end
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_846)) begin
        if ((or_ln28_1_reg_1275 == 1'd1)) begin
            m_axi_gmem_WSTRB = shl_ln34_reg_1455;
        end else if ((or_ln28_1_reg_1275 == 1'd0)) begin
            m_axi_gmem_WSTRB = shl_ln30_reg_1444;
        end else begin
            m_axi_gmem_WSTRB = 'bx;
        end
    end else begin
        m_axi_gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln28_1_reg_1275 == 1'd0)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_0_ce0 = 1'b1;
    end else begin
        tbmat_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_10_ce0 = 1'b1;
    end else begin
        tbmat_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_11_ce0 = 1'b1;
    end else begin
        tbmat_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_12_ce0 = 1'b1;
    end else begin
        tbmat_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_13_ce0 = 1'b1;
    end else begin
        tbmat_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_14_ce0 = 1'b1;
    end else begin
        tbmat_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_15_ce0 = 1'b1;
    end else begin
        tbmat_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_16_ce0 = 1'b1;
    end else begin
        tbmat_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_17_ce0 = 1'b1;
    end else begin
        tbmat_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_18_ce0 = 1'b1;
    end else begin
        tbmat_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_19_ce0 = 1'b1;
    end else begin
        tbmat_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_1_ce0 = 1'b1;
    end else begin
        tbmat_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_20_ce0 = 1'b1;
    end else begin
        tbmat_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_21_ce0 = 1'b1;
    end else begin
        tbmat_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_22_ce0 = 1'b1;
    end else begin
        tbmat_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_23_ce0 = 1'b1;
    end else begin
        tbmat_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_24_ce0 = 1'b1;
    end else begin
        tbmat_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_25_ce0 = 1'b1;
    end else begin
        tbmat_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_26_ce0 = 1'b1;
    end else begin
        tbmat_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_27_ce0 = 1'b1;
    end else begin
        tbmat_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_28_ce0 = 1'b1;
    end else begin
        tbmat_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_29_ce0 = 1'b1;
    end else begin
        tbmat_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_2_ce0 = 1'b1;
    end else begin
        tbmat_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_30_ce0 = 1'b1;
    end else begin
        tbmat_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_31_ce0 = 1'b1;
    end else begin
        tbmat_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_3_ce0 = 1'b1;
    end else begin
        tbmat_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_4_ce0 = 1'b1;
    end else begin
        tbmat_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_5_ce0 = 1'b1;
    end else begin
        tbmat_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_6_ce0 = 1'b1;
    end else begin
        tbmat_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_7_ce0 = 1'b1;
    end else begin
        tbmat_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_8_ce0 = 1'b1;
    end else begin
        tbmat_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tbmat_9_ce0 = 1'b1;
    end else begin
        tbmat_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to35 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_727_p2 = (i_fu_172 + 10'd1);

assign add_ln29_fu_783_p2 = (tmp_1_fu_771_p3 + trunc_ln29_fu_779_p1);

assign add_ln30_1_fu_829_p2 = (trunc_ln30_fu_825_p1 + trunc_ln30_1);

assign add_ln34_1_fu_858_p2 = (trunc_ln34_fu_854_p1 + trunc_ln30_1);

assign and_ln147_1_fu_1170_p2 = (icmp_ln147_2_reg_1537 & icmp_ln147_1_reg_1532);

assign and_ln147_2_fu_1174_p2 = (icmp_ln147_reg_1527 & and_ln147_1_fu_1170_p2);

assign and_ln147_fu_1127_p2 = (xor_ln147_fu_1122_p2 & state_5_reg_1510);

assign and_ln149_1_fu_1144_p2 = (xor_ln149_fu_1139_p2 & select_ln147_fu_1132_p3);

assign and_ln149_2_fu_1154_p2 = (icmp_ln232_1_reg_1482 & icmp_ln149_1_reg_1522);

assign and_ln149_fu_1059_p2 = (icmp_ln232_1_fu_978_p2 & icmp_ln149_fu_1053_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter35 == 1'b1) & (((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)) | ((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd0) & (m_axi_gmem_BVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter35 == 1'b1) & (((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)) | ((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd0) & (m_axi_gmem_BVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter35 == 1'b1) & (((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)) | ((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd0) & (m_axi_gmem_BVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((ap_predicate_op251_writereq_state3 == 1'b1) & (m_axi_gmem_AWREADY == 1'b0)) | ((ap_predicate_op240_writereq_state3 == 1'b1) & (m_axi_gmem_AWREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((or_ln28_1_reg_1275 == 1'd1) & (m_axi_gmem_WREADY == 1'b0)) | ((or_ln28_1_reg_1275 == 1'd0) & (m_axi_gmem_WREADY == 1'b0)));
end

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage1_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage1_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage1_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage1_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage1_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage1_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp0_stage1_iter35 = (((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)) | ((or_ln28_1_reg_1275_pp0_iter34_reg == 1'd0) & (m_axi_gmem_BVALID == 1'b0)));
end

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_832 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_846 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op240_writereq_state3 = ((icmp_ln26_reg_1271 == 1'd0) & (or_ln28_1_reg_1275 == 1'd0));
end

always @ (*) begin
    ap_predicate_op251_writereq_state3 = ((icmp_ln26_reg_1271 == 1'd0) & (or_ln28_1_reg_1275 == 1'd1));
end

assign col_5_fu_1042_p2 = ($signed(col_4_reg_1265) + $signed(32'd4294967295));

assign col_6_fu_1100_p3 = ((icmp_ln232_2_reg_1487[0:0] == 1'b1) ? col_5_reg_1504 : col_4_reg_1265);

assign col_7_fu_1105_p3 = ((and_ln149_reg_1515[0:0] == 1'b1) ? col_5_reg_1504 : col_6_fu_1100_p3);

assign grp_fu_669_p2 = (i_cast_fu_736_p1 + traceback_out);

assign grp_fu_673_p4 = {{grp_fu_669_p2[63:2]}};

assign i_cast_fu_736_p1 = i_fu_172;

assign icmp_ln147_1_fu_1077_p2 = ((state_fu_180 != 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln147_2_fu_1083_p2 = ((state_fu_180 != 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_1071_p2 = ((state_fu_180 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln149_1_fu_1065_p2 = ((trunc_ln149_fu_1033_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_1053_p2 = ((trunc_ln149_fu_1033_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln232_1_fu_978_p2 = ((state_fu_180 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln232_2_fu_984_p2 = ((state_fu_180 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_964_p2 = ((state_fu_180 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_721_p2 = ((i_fu_172 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_1186_p2 = ((state_6_fu_1179_p3 == 32'd3) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_761_p4 = {{ap_sig_allocacmp_row_4[7:5]}};

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln232_fu_998_p2 = (icmp_ln232_2_fu_984_p2 | icmp_ln232_1_fu_978_p2);

assign or_ln28_1_fu_755_p2 = (tmp_fu_747_p3 | ap_sig_allocacmp_end_load);

assign or_ln28_fu_741_p2 = (ap_sig_allocacmp_row_4 | ap_sig_allocacmp_col_4);

assign row_5_fu_1037_p2 = ($signed(row_4_reg_1258) + $signed(32'd4294967295));

assign row_6_fu_1111_p3 = ((icmp_ln232_reg_1476[0:0] == 1'b1) ? row_5_reg_1498 : row_4_reg_1258);

assign row_7_fu_1116_p3 = ((and_ln149_reg_1515[0:0] == 1'b1) ? row_5_reg_1498 : row_6_fu_1111_p3);

assign select_ln147_fu_1132_p3 = ((icmp_ln232_2_reg_1487[0:0] == 1'b1) ? state_4_fu_1093_p3 : and_ln147_fu_1127_p2);

assign select_ln149_fu_1158_p3 = ((and_ln149_2_fu_1154_p2[0:0] == 1'b1) ? 2'd2 : zext_ln149_fu_1150_p1);

assign select_ln232_1_fu_1004_p3 = ((or_ln232_fu_998_p2[0:0] == 1'b1) ? select_ln232_fu_990_p3 : select_ln232_2_fu_970_p3);

assign select_ln232_2_fu_970_p3 = ((icmp_ln232_fu_964_p2[0:0] == 1'b1) ? 2'd3 : 2'd0);

assign select_ln232_fu_990_p3 = ((icmp_ln232_2_fu_984_p2[0:0] == 1'b1) ? 2'd1 : 2'd2);

assign sext_ln30_fu_844_p1 = $signed(grp_fu_673_p4);

assign sext_ln34_fu_873_p1 = $signed(grp_fu_673_p4);

assign shl_ln30_1_fu_1016_p3 = {{add_ln30_1_reg_1439}, {3'd0}};

assign shl_ln30_2_fu_1027_p2 = zext_ln30_2_fu_1012_p1 << zext_ln30_3_fu_1023_p1;

assign shl_ln30_fu_838_p2 = 4'd1 << zext_ln30_1_fu_834_p1;

assign shl_ln34_fu_867_p2 = 4'd1 << zext_ln34_fu_863_p1;

assign state_4_fu_1093_p3 = tbp_reg_1471[32'd2];

assign state_5_fu_1047_p2 = ((trunc_ln149_fu_1033_p1 == 2'd1) ? 1'b1 : 1'b0);

assign state_6_fu_1179_p3 = ((and_ln147_2_fu_1174_p2[0:0] == 1'b1) ? state_1_reg_1466 : zext_ln147_fu_1166_p1);

assign tbmat_0_address0 = zext_ln29_fu_789_p1;

assign tbmat_10_address0 = zext_ln29_fu_789_p1;

assign tbmat_11_address0 = zext_ln29_fu_789_p1;

assign tbmat_12_address0 = zext_ln29_fu_789_p1;

assign tbmat_13_address0 = zext_ln29_fu_789_p1;

assign tbmat_14_address0 = zext_ln29_fu_789_p1;

assign tbmat_15_address0 = zext_ln29_fu_789_p1;

assign tbmat_16_address0 = zext_ln29_fu_789_p1;

assign tbmat_17_address0 = zext_ln29_fu_789_p1;

assign tbmat_18_address0 = zext_ln29_fu_789_p1;

assign tbmat_19_address0 = zext_ln29_fu_789_p1;

assign tbmat_1_address0 = zext_ln29_fu_789_p1;

assign tbmat_20_address0 = zext_ln29_fu_789_p1;

assign tbmat_21_address0 = zext_ln29_fu_789_p1;

assign tbmat_22_address0 = zext_ln29_fu_789_p1;

assign tbmat_23_address0 = zext_ln29_fu_789_p1;

assign tbmat_24_address0 = zext_ln29_fu_789_p1;

assign tbmat_25_address0 = zext_ln29_fu_789_p1;

assign tbmat_26_address0 = zext_ln29_fu_789_p1;

assign tbmat_27_address0 = zext_ln29_fu_789_p1;

assign tbmat_28_address0 = zext_ln29_fu_789_p1;

assign tbmat_29_address0 = zext_ln29_fu_789_p1;

assign tbmat_2_address0 = zext_ln29_fu_789_p1;

assign tbmat_30_address0 = zext_ln29_fu_789_p1;

assign tbmat_31_address0 = zext_ln29_fu_789_p1;

assign tbmat_3_address0 = zext_ln29_fu_789_p1;

assign tbmat_4_address0 = zext_ln29_fu_789_p1;

assign tbmat_5_address0 = zext_ln29_fu_789_p1;

assign tbmat_6_address0 = zext_ln29_fu_789_p1;

assign tbmat_7_address0 = zext_ln29_fu_789_p1;

assign tbmat_8_address0 = zext_ln29_fu_789_p1;

assign tbmat_9_address0 = zext_ln29_fu_789_p1;

assign tbp_fu_894_p33 = row_4_reg_1258[4:0];

assign tmp_1_fu_771_p3 = {{lshr_ln1_fu_761_p4}, {8'd0}};

assign tmp_fu_747_p3 = or_ln28_fu_741_p2[32'd31];

assign trunc_ln149_fu_1033_p1 = tbp_fu_894_p34[1:0];

assign trunc_ln29_fu_779_p1 = ap_sig_allocacmp_col_4[10:0];

assign trunc_ln30_fu_825_p1 = i_fu_172[1:0];

assign trunc_ln34_fu_854_p1 = i_fu_172[1:0];

assign xor_ln147_fu_1122_p2 = (icmp_ln232_reg_1476 ^ 1'd1);

assign xor_ln149_fu_1139_p2 = (1'd1 ^ and_ln149_reg_1515);

assign zext_ln147_fu_1166_p1 = select_ln149_fu_1158_p3;

assign zext_ln149_fu_1150_p1 = and_ln149_1_fu_1144_p2;

assign zext_ln29_fu_789_p1 = add_ln29_fu_783_p2;

assign zext_ln30_1_fu_834_p1 = add_ln30_1_fu_829_p2;

assign zext_ln30_2_fu_1012_p1 = select_ln232_1_fu_1004_p3;

assign zext_ln30_3_fu_1023_p1 = shl_ln30_1_fu_1016_p3;

assign zext_ln30_4_fu_1089_p1 = shl_ln30_2_reg_1493;

assign zext_ln30_cast_fu_683_p1 = zext_ln30;

assign zext_ln34_fu_863_p1 = add_ln34_1_fu_858_p2;

endmodule //seq_align_multiple_static_Traceback_Pipeline_traceback_loop
