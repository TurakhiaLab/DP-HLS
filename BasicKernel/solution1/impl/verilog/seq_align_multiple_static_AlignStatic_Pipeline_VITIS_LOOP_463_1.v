// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_score,
        max_chunk_offset,
        max_pe_offset,
        local_max_score_32_2,
        local_max_score_33_2,
        local_max_score_34_2,
        local_max_score_35_2,
        local_max_score_36_2,
        local_max_score_37_2,
        local_max_score_38_2,
        local_max_score_39_2,
        local_max_score_40_2,
        local_max_score_41_2,
        local_max_score_42_2,
        local_max_score_43_2,
        local_max_score_44_2,
        local_max_score_45_2,
        local_max_score_46_2,
        local_max_score_47_2,
        local_max_score_48_2,
        local_max_score_49_2,
        local_max_score_50_2,
        local_max_score_51_2,
        local_max_score_52_2,
        local_max_score_53_2,
        local_max_score_54_2,
        local_max_score_55_2,
        local_max_score_56_2,
        local_max_score_57_2,
        local_max_score_58_2,
        local_max_score_59_2,
        local_max_score_60_2,
        local_max_score_61_2,
        local_max_score_62_2,
        local_max_chunk_offset_32_2,
        local_max_chunk_offset_33_2,
        local_max_chunk_offset_34_2,
        local_max_chunk_offset_35_2,
        local_max_chunk_offset_36_2,
        local_max_chunk_offset_37_2,
        local_max_chunk_offset_38_2,
        local_max_chunk_offset_39_2,
        local_max_chunk_offset_40_2,
        local_max_chunk_offset_41_2,
        local_max_chunk_offset_42_2,
        local_max_chunk_offset_43_2,
        local_max_chunk_offset_44_2,
        local_max_chunk_offset_45_2,
        local_max_chunk_offset_46_2,
        local_max_chunk_offset_47_2,
        local_max_chunk_offset_48_2,
        local_max_chunk_offset_49_2,
        local_max_chunk_offset_50_2,
        local_max_chunk_offset_51_2,
        local_max_chunk_offset_52_2,
        local_max_chunk_offset_53_2,
        local_max_chunk_offset_54_2,
        local_max_chunk_offset_55_2,
        local_max_chunk_offset_56_2,
        local_max_chunk_offset_57_2,
        local_max_chunk_offset_58_2,
        local_max_chunk_offset_59_2,
        local_max_chunk_offset_60_2,
        local_max_chunk_offset_61_2,
        local_max_chunk_offset_62_2,
        local_max_pe_offset_32_2,
        local_max_pe_offset_33_2,
        local_max_pe_offset_34_2,
        local_max_pe_offset_35_2,
        local_max_pe_offset_36_2,
        local_max_pe_offset_37_2,
        local_max_pe_offset_38_2,
        local_max_pe_offset_39_2,
        local_max_pe_offset_40_2,
        local_max_pe_offset_41_2,
        local_max_pe_offset_42_2,
        local_max_pe_offset_43_2,
        local_max_pe_offset_44_2,
        local_max_pe_offset_45_2,
        local_max_pe_offset_46_2,
        local_max_pe_offset_47_2,
        local_max_pe_offset_48_2,
        local_max_pe_offset_49_2,
        local_max_pe_offset_50_2,
        local_max_pe_offset_51_2,
        local_max_pe_offset_52_2,
        local_max_pe_offset_53_2,
        local_max_pe_offset_54_2,
        local_max_pe_offset_55_2,
        local_max_pe_offset_56_2,
        local_max_pe_offset_57_2,
        local_max_pe_offset_58_2,
        local_max_pe_offset_59_2,
        local_max_pe_offset_60_2,
        local_max_pe_offset_61_2,
        local_max_pe_offset_62_2,
        max_chunk_offset_1_out,
        max_chunk_offset_1_out_ap_vld,
        max_pe_1_out,
        max_pe_1_out_ap_vld,
        max_pe_offset_1_out,
        max_pe_offset_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] max_score;
input  [31:0] max_chunk_offset;
input  [31:0] max_pe_offset;
input  [15:0] local_max_score_32_2;
input  [15:0] local_max_score_33_2;
input  [15:0] local_max_score_34_2;
input  [15:0] local_max_score_35_2;
input  [15:0] local_max_score_36_2;
input  [15:0] local_max_score_37_2;
input  [15:0] local_max_score_38_2;
input  [15:0] local_max_score_39_2;
input  [15:0] local_max_score_40_2;
input  [15:0] local_max_score_41_2;
input  [15:0] local_max_score_42_2;
input  [15:0] local_max_score_43_2;
input  [15:0] local_max_score_44_2;
input  [15:0] local_max_score_45_2;
input  [15:0] local_max_score_46_2;
input  [15:0] local_max_score_47_2;
input  [15:0] local_max_score_48_2;
input  [15:0] local_max_score_49_2;
input  [15:0] local_max_score_50_2;
input  [15:0] local_max_score_51_2;
input  [15:0] local_max_score_52_2;
input  [15:0] local_max_score_53_2;
input  [15:0] local_max_score_54_2;
input  [15:0] local_max_score_55_2;
input  [15:0] local_max_score_56_2;
input  [15:0] local_max_score_57_2;
input  [15:0] local_max_score_58_2;
input  [15:0] local_max_score_59_2;
input  [15:0] local_max_score_60_2;
input  [15:0] local_max_score_61_2;
input  [15:0] local_max_score_62_2;
input  [31:0] local_max_chunk_offset_32_2;
input  [31:0] local_max_chunk_offset_33_2;
input  [31:0] local_max_chunk_offset_34_2;
input  [31:0] local_max_chunk_offset_35_2;
input  [31:0] local_max_chunk_offset_36_2;
input  [31:0] local_max_chunk_offset_37_2;
input  [31:0] local_max_chunk_offset_38_2;
input  [31:0] local_max_chunk_offset_39_2;
input  [31:0] local_max_chunk_offset_40_2;
input  [31:0] local_max_chunk_offset_41_2;
input  [31:0] local_max_chunk_offset_42_2;
input  [31:0] local_max_chunk_offset_43_2;
input  [31:0] local_max_chunk_offset_44_2;
input  [31:0] local_max_chunk_offset_45_2;
input  [31:0] local_max_chunk_offset_46_2;
input  [31:0] local_max_chunk_offset_47_2;
input  [31:0] local_max_chunk_offset_48_2;
input  [31:0] local_max_chunk_offset_49_2;
input  [31:0] local_max_chunk_offset_50_2;
input  [31:0] local_max_chunk_offset_51_2;
input  [31:0] local_max_chunk_offset_52_2;
input  [31:0] local_max_chunk_offset_53_2;
input  [31:0] local_max_chunk_offset_54_2;
input  [31:0] local_max_chunk_offset_55_2;
input  [31:0] local_max_chunk_offset_56_2;
input  [31:0] local_max_chunk_offset_57_2;
input  [31:0] local_max_chunk_offset_58_2;
input  [31:0] local_max_chunk_offset_59_2;
input  [31:0] local_max_chunk_offset_60_2;
input  [31:0] local_max_chunk_offset_61_2;
input  [31:0] local_max_chunk_offset_62_2;
input  [31:0] local_max_pe_offset_32_2;
input  [31:0] local_max_pe_offset_33_2;
input  [31:0] local_max_pe_offset_34_2;
input  [31:0] local_max_pe_offset_35_2;
input  [31:0] local_max_pe_offset_36_2;
input  [31:0] local_max_pe_offset_37_2;
input  [31:0] local_max_pe_offset_38_2;
input  [31:0] local_max_pe_offset_39_2;
input  [31:0] local_max_pe_offset_40_2;
input  [31:0] local_max_pe_offset_41_2;
input  [31:0] local_max_pe_offset_42_2;
input  [31:0] local_max_pe_offset_43_2;
input  [31:0] local_max_pe_offset_44_2;
input  [31:0] local_max_pe_offset_45_2;
input  [31:0] local_max_pe_offset_46_2;
input  [31:0] local_max_pe_offset_47_2;
input  [31:0] local_max_pe_offset_48_2;
input  [31:0] local_max_pe_offset_49_2;
input  [31:0] local_max_pe_offset_50_2;
input  [31:0] local_max_pe_offset_51_2;
input  [31:0] local_max_pe_offset_52_2;
input  [31:0] local_max_pe_offset_53_2;
input  [31:0] local_max_pe_offset_54_2;
input  [31:0] local_max_pe_offset_55_2;
input  [31:0] local_max_pe_offset_56_2;
input  [31:0] local_max_pe_offset_57_2;
input  [31:0] local_max_pe_offset_58_2;
input  [31:0] local_max_pe_offset_59_2;
input  [31:0] local_max_pe_offset_60_2;
input  [31:0] local_max_pe_offset_61_2;
input  [31:0] local_max_pe_offset_62_2;
output  [31:0] max_chunk_offset_1_out;
output   max_chunk_offset_1_out_ap_vld;
output  [31:0] max_pe_1_out;
output   max_pe_1_out_ap_vld;
output  [31:0] max_pe_offset_1_out;
output   max_pe_offset_1_out_ap_vld;

reg ap_idle;
reg max_chunk_offset_1_out_ap_vld;
reg max_pe_1_out_ap_vld;
reg max_pe_offset_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln463_fu_894_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] local_max_pe_address0;
reg    local_max_pe_ce0;
wire   [4:0] local_max_pe_q0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln465_fu_962_p2;
reg   [0:0] icmp_ln465_reg_1640;
wire   [63:0] i_2_cast_fu_915_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_pe_offset_1_fu_236;
wire   [31:0] max_pe_offset_3_fu_1044_p3;
wire    ap_loop_init;
reg   [31:0] max_pe_fu_240;
wire   [31:0] max_pe_2_fu_1095_p3;
reg   [31:0] max_chunk_offset_1_fu_244;
wire   [31:0] max_chunk_offset_3_fu_1052_p3;
reg   [15:0] max_score_1_fu_248;
wire   [15:0] max_score_3_fu_1060_p3;
reg   [5:0] i_2_fu_252;
wire   [5:0] add_ln463_fu_900_p2;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln462_fu_920_p1;
wire   [15:0] max_score_2_fu_924_p34;
wire   [31:0] max_pe_offset_2_fu_1006_p34;
wire   [31:0] max_chunk_offset_2_fu_968_p34;
wire   [31:0] zext_ln467_fu_1091_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1_local_max_pe_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_max_pe_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_max_pe_address0),
    .ce0(local_max_pe_ce0),
    .q0(local_max_pe_q0)
);

seq_align_multiple_static_mux_32_5_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_32_5_16_1_1_U674(
    .din0(max_score),
    .din1(local_max_score_32_2),
    .din2(local_max_score_33_2),
    .din3(local_max_score_34_2),
    .din4(local_max_score_35_2),
    .din5(local_max_score_36_2),
    .din6(local_max_score_37_2),
    .din7(local_max_score_38_2),
    .din8(local_max_score_39_2),
    .din9(local_max_score_40_2),
    .din10(local_max_score_41_2),
    .din11(local_max_score_42_2),
    .din12(local_max_score_43_2),
    .din13(local_max_score_44_2),
    .din14(local_max_score_45_2),
    .din15(local_max_score_46_2),
    .din16(local_max_score_47_2),
    .din17(local_max_score_48_2),
    .din18(local_max_score_49_2),
    .din19(local_max_score_50_2),
    .din20(local_max_score_51_2),
    .din21(local_max_score_52_2),
    .din22(local_max_score_53_2),
    .din23(local_max_score_54_2),
    .din24(local_max_score_55_2),
    .din25(local_max_score_56_2),
    .din26(local_max_score_57_2),
    .din27(local_max_score_58_2),
    .din28(local_max_score_59_2),
    .din29(local_max_score_60_2),
    .din30(local_max_score_61_2),
    .din31(local_max_score_62_2),
    .din32(trunc_ln462_fu_920_p1),
    .dout(max_score_2_fu_924_p34)
);

seq_align_multiple_static_mux_32_5_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_32_5_32_1_1_U675(
    .din0(max_chunk_offset),
    .din1(local_max_chunk_offset_32_2),
    .din2(local_max_chunk_offset_33_2),
    .din3(local_max_chunk_offset_34_2),
    .din4(local_max_chunk_offset_35_2),
    .din5(local_max_chunk_offset_36_2),
    .din6(local_max_chunk_offset_37_2),
    .din7(local_max_chunk_offset_38_2),
    .din8(local_max_chunk_offset_39_2),
    .din9(local_max_chunk_offset_40_2),
    .din10(local_max_chunk_offset_41_2),
    .din11(local_max_chunk_offset_42_2),
    .din12(local_max_chunk_offset_43_2),
    .din13(local_max_chunk_offset_44_2),
    .din14(local_max_chunk_offset_45_2),
    .din15(local_max_chunk_offset_46_2),
    .din16(local_max_chunk_offset_47_2),
    .din17(local_max_chunk_offset_48_2),
    .din18(local_max_chunk_offset_49_2),
    .din19(local_max_chunk_offset_50_2),
    .din20(local_max_chunk_offset_51_2),
    .din21(local_max_chunk_offset_52_2),
    .din22(local_max_chunk_offset_53_2),
    .din23(local_max_chunk_offset_54_2),
    .din24(local_max_chunk_offset_55_2),
    .din25(local_max_chunk_offset_56_2),
    .din26(local_max_chunk_offset_57_2),
    .din27(local_max_chunk_offset_58_2),
    .din28(local_max_chunk_offset_59_2),
    .din29(local_max_chunk_offset_60_2),
    .din30(local_max_chunk_offset_61_2),
    .din31(local_max_chunk_offset_62_2),
    .din32(trunc_ln462_fu_920_p1),
    .dout(max_chunk_offset_2_fu_968_p34)
);

seq_align_multiple_static_mux_32_5_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_32_5_32_1_1_U676(
    .din0(max_pe_offset),
    .din1(local_max_pe_offset_32_2),
    .din2(local_max_pe_offset_33_2),
    .din3(local_max_pe_offset_34_2),
    .din4(local_max_pe_offset_35_2),
    .din5(local_max_pe_offset_36_2),
    .din6(local_max_pe_offset_37_2),
    .din7(local_max_pe_offset_38_2),
    .din8(local_max_pe_offset_39_2),
    .din9(local_max_pe_offset_40_2),
    .din10(local_max_pe_offset_41_2),
    .din11(local_max_pe_offset_42_2),
    .din12(local_max_pe_offset_43_2),
    .din13(local_max_pe_offset_44_2),
    .din14(local_max_pe_offset_45_2),
    .din15(local_max_pe_offset_46_2),
    .din16(local_max_pe_offset_47_2),
    .din17(local_max_pe_offset_48_2),
    .din18(local_max_pe_offset_49_2),
    .din19(local_max_pe_offset_50_2),
    .din20(local_max_pe_offset_51_2),
    .din21(local_max_pe_offset_52_2),
    .din22(local_max_pe_offset_53_2),
    .din23(local_max_pe_offset_54_2),
    .din24(local_max_pe_offset_55_2),
    .din25(local_max_pe_offset_56_2),
    .din26(local_max_pe_offset_57_2),
    .din27(local_max_pe_offset_58_2),
    .din28(local_max_pe_offset_59_2),
    .din29(local_max_pe_offset_60_2),
    .din30(local_max_pe_offset_61_2),
    .din31(local_max_pe_offset_62_2),
    .din32(trunc_ln462_fu_920_p1),
    .dout(max_pe_offset_2_fu_1006_p34)
);

seq_align_multiple_static_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_2_fu_252 <= 6'd0;
        end else if (((icmp_ln463_fu_894_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_2_fu_252 <= add_ln463_fu_900_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_chunk_offset_1_fu_244 <= max_chunk_offset;
        end else if (((icmp_ln463_fu_894_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            max_chunk_offset_1_fu_244 <= max_chunk_offset_3_fu_1052_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            max_pe_fu_240 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            max_pe_fu_240 <= max_pe_2_fu_1095_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_pe_offset_1_fu_236 <= max_pe_offset;
        end else if (((icmp_ln463_fu_894_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            max_pe_offset_1_fu_236 <= max_pe_offset_3_fu_1044_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_score_1_fu_248 <= max_score;
        end else if (((icmp_ln463_fu_894_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            max_score_1_fu_248 <= max_score_3_fu_1060_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln463_fu_894_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln465_reg_1640 <= icmp_ln465_fu_962_p2;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_894_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_max_pe_ce0 = 1'b1;
    end else begin
        local_max_pe_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_894_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_chunk_offset_1_out_ap_vld = 1'b1;
    end else begin
        max_chunk_offset_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_894_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pe_1_out_ap_vld = 1'b1;
    end else begin
        max_pe_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_894_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pe_offset_1_out_ap_vld = 1'b1;
    end else begin
        max_pe_offset_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln463_fu_900_p2 = (i_2_fu_252 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_2_cast_fu_915_p1 = i_2_fu_252;

assign icmp_ln463_fu_894_p2 = ((i_2_fu_252 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln465_fu_962_p2 = (($signed(max_score_2_fu_924_p34) > $signed(max_score_1_fu_248)) ? 1'b1 : 1'b0);

assign local_max_pe_address0 = i_2_cast_fu_915_p1;

assign max_chunk_offset_1_out = max_chunk_offset_1_fu_244;

assign max_chunk_offset_3_fu_1052_p3 = ((icmp_ln465_fu_962_p2[0:0] == 1'b1) ? max_chunk_offset_2_fu_968_p34 : max_chunk_offset_1_fu_244);

assign max_pe_1_out = max_pe_fu_240;

assign max_pe_2_fu_1095_p3 = ((icmp_ln465_reg_1640[0:0] == 1'b1) ? zext_ln467_fu_1091_p1 : max_pe_fu_240);

assign max_pe_offset_1_out = max_pe_offset_1_fu_236;

assign max_pe_offset_3_fu_1044_p3 = ((icmp_ln465_fu_962_p2[0:0] == 1'b1) ? max_pe_offset_2_fu_1006_p34 : max_pe_offset_1_fu_236);

assign max_score_3_fu_1060_p3 = ((icmp_ln465_fu_962_p2[0:0] == 1'b1) ? max_score_2_fu_924_p34 : max_score_1_fu_248);

assign trunc_ln462_fu_920_p1 = i_2_fu_252[4:0];

assign zext_ln467_fu_1091_p1 = local_max_pe_q0;

endmodule //seq_align_multiple_static_AlignStatic_Pipeline_VITIS_LOOP_463_1
