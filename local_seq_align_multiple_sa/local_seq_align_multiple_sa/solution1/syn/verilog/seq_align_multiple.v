// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="seq_align_multiple_seq_align_multiple,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu5p-flva2104-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.044250,HLS_SYN_LAT=1082352,HLS_SYN_TPT=none,HLS_SYN_MEM=272,HLS_SYN_DSP=0,HLS_SYN_FF=50898,HLS_SYN_LUT=159624,HLS_VERSION=2022_1}" *)

module seq_align_multiple (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        chunk1_address0,
        chunk1_ce0,
        chunk1_q0,
        chunk2_address0,
        chunk2_ce0,
        chunk2_q0,
        chunk3_address0,
        chunk3_ce0,
        chunk3_q0,
        chunk4_address0,
        chunk4_ce0,
        chunk4_q0,
        chunk5_address0,
        chunk5_ce0,
        chunk5_q0,
        chunk6_address0,
        chunk6_ce0,
        chunk6_q0,
        chunk7_address0,
        chunk7_ce0,
        chunk7_q0,
        chunk8_address0,
        chunk8_ce0,
        chunk8_q0,
        ref1_address0,
        ref1_ce0,
        ref1_q0,
        ref2_address0,
        ref2_ce0,
        ref2_q0,
        ref3_address0,
        ref3_ce0,
        ref3_q0,
        ref4_address0,
        ref4_ce0,
        ref4_q0,
        ref5_address0,
        ref5_ce0,
        ref5_q0,
        ref6_address0,
        ref6_ce0,
        ref6_q0,
        ref7_address0,
        ref7_ce0,
        ref7_q0,
        ref8_address0,
        ref8_ce0,
        ref8_q0,
        dummy1_out,
        dummy1_out_ap_vld,
        dummy2_out,
        dummy2_out_ap_vld,
        dummy3_out,
        dummy3_out_ap_vld,
        dummy4_out,
        dummy4_out_ap_vld,
        dummy5_out,
        dummy5_out_ap_vld,
        dummy6_out,
        dummy6_out_ap_vld,
        dummy7_out,
        dummy7_out_ap_vld,
        dummy8_out,
        dummy8_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] chunk1_address0;
output   chunk1_ce0;
input  [1:0] chunk1_q0;
output  [9:0] chunk2_address0;
output   chunk2_ce0;
input  [1:0] chunk2_q0;
output  [9:0] chunk3_address0;
output   chunk3_ce0;
input  [1:0] chunk3_q0;
output  [9:0] chunk4_address0;
output   chunk4_ce0;
input  [1:0] chunk4_q0;
output  [9:0] chunk5_address0;
output   chunk5_ce0;
input  [1:0] chunk5_q0;
output  [9:0] chunk6_address0;
output   chunk6_ce0;
input  [1:0] chunk6_q0;
output  [9:0] chunk7_address0;
output   chunk7_ce0;
input  [1:0] chunk7_q0;
output  [9:0] chunk8_address0;
output   chunk8_ce0;
input  [1:0] chunk8_q0;
output  [9:0] ref1_address0;
output   ref1_ce0;
input  [1:0] ref1_q0;
output  [9:0] ref2_address0;
output   ref2_ce0;
input  [1:0] ref2_q0;
output  [9:0] ref3_address0;
output   ref3_ce0;
input  [1:0] ref3_q0;
output  [9:0] ref4_address0;
output   ref4_ce0;
input  [1:0] ref4_q0;
output  [9:0] ref5_address0;
output   ref5_ce0;
input  [1:0] ref5_q0;
output  [9:0] ref6_address0;
output   ref6_ce0;
input  [1:0] ref6_q0;
output  [9:0] ref7_address0;
output   ref7_ce0;
input  [1:0] ref7_q0;
output  [9:0] ref8_address0;
output   ref8_ce0;
input  [1:0] ref8_q0;
output  [9:0] dummy1_out;
output   dummy1_out_ap_vld;
output  [9:0] dummy2_out;
output   dummy2_out_ap_vld;
output  [9:0] dummy3_out;
output   dummy3_out_ap_vld;
output  [9:0] dummy4_out;
output   dummy4_out_ap_vld;
output  [9:0] dummy5_out;
output   dummy5_out_ap_vld;
output  [9:0] dummy6_out;
output   dummy6_out_ap_vld;
output  [9:0] dummy7_out;
output   dummy7_out_ap_vld;
output  [9:0] dummy8_out;
output   dummy8_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dummy1_out_ap_vld;
reg dummy2_out_ap_vld;
reg dummy3_out_ap_vld;
reg dummy4_out_ap_vld;
reg dummy5_out_ap_vld;
reg dummy6_out_ap_vld;
reg dummy7_out_ap_vld;
reg dummy8_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_seq_align_fu_126_ap_start;
wire    grp_seq_align_fu_126_ap_done;
wire    grp_seq_align_fu_126_ap_idle;
wire    grp_seq_align_fu_126_ap_ready;
wire   [9:0] grp_seq_align_fu_126_chunk1_address0;
wire    grp_seq_align_fu_126_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_126_ref1_address0;
wire    grp_seq_align_fu_126_ref1_ce0;
wire   [8:0] grp_seq_align_fu_126_ap_return;
wire    grp_seq_align_fu_134_ap_start;
wire    grp_seq_align_fu_134_ap_done;
wire    grp_seq_align_fu_134_ap_idle;
wire    grp_seq_align_fu_134_ap_ready;
wire   [9:0] grp_seq_align_fu_134_chunk1_address0;
wire    grp_seq_align_fu_134_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_134_ref1_address0;
wire    grp_seq_align_fu_134_ref1_ce0;
wire   [8:0] grp_seq_align_fu_134_ap_return;
wire    grp_seq_align_fu_142_ap_start;
wire    grp_seq_align_fu_142_ap_done;
wire    grp_seq_align_fu_142_ap_idle;
wire    grp_seq_align_fu_142_ap_ready;
wire   [9:0] grp_seq_align_fu_142_chunk1_address0;
wire    grp_seq_align_fu_142_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_142_ref1_address0;
wire    grp_seq_align_fu_142_ref1_ce0;
wire   [8:0] grp_seq_align_fu_142_ap_return;
wire    grp_seq_align_fu_150_ap_start;
wire    grp_seq_align_fu_150_ap_done;
wire    grp_seq_align_fu_150_ap_idle;
wire    grp_seq_align_fu_150_ap_ready;
wire   [9:0] grp_seq_align_fu_150_chunk1_address0;
wire    grp_seq_align_fu_150_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_150_ref1_address0;
wire    grp_seq_align_fu_150_ref1_ce0;
wire   [8:0] grp_seq_align_fu_150_ap_return;
wire    grp_seq_align_fu_158_ap_start;
wire    grp_seq_align_fu_158_ap_done;
wire    grp_seq_align_fu_158_ap_idle;
wire    grp_seq_align_fu_158_ap_ready;
wire   [9:0] grp_seq_align_fu_158_chunk1_address0;
wire    grp_seq_align_fu_158_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_158_ref1_address0;
wire    grp_seq_align_fu_158_ref1_ce0;
wire   [8:0] grp_seq_align_fu_158_ap_return;
wire    grp_seq_align_fu_166_ap_start;
wire    grp_seq_align_fu_166_ap_done;
wire    grp_seq_align_fu_166_ap_idle;
wire    grp_seq_align_fu_166_ap_ready;
wire   [9:0] grp_seq_align_fu_166_chunk1_address0;
wire    grp_seq_align_fu_166_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_166_ref1_address0;
wire    grp_seq_align_fu_166_ref1_ce0;
wire   [8:0] grp_seq_align_fu_166_ap_return;
wire    grp_seq_align_fu_174_ap_start;
wire    grp_seq_align_fu_174_ap_done;
wire    grp_seq_align_fu_174_ap_idle;
wire    grp_seq_align_fu_174_ap_ready;
wire   [9:0] grp_seq_align_fu_174_chunk1_address0;
wire    grp_seq_align_fu_174_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_174_ref1_address0;
wire    grp_seq_align_fu_174_ref1_ce0;
wire   [8:0] grp_seq_align_fu_174_ap_return;
wire    grp_seq_align_fu_182_ap_start;
wire    grp_seq_align_fu_182_ap_done;
wire    grp_seq_align_fu_182_ap_idle;
wire    grp_seq_align_fu_182_ap_ready;
wire   [9:0] grp_seq_align_fu_182_chunk1_address0;
wire    grp_seq_align_fu_182_chunk1_ce0;
wire   [9:0] grp_seq_align_fu_182_ref1_address0;
wire    grp_seq_align_fu_182_ref1_ce0;
wire   [8:0] grp_seq_align_fu_182_ap_return;
reg    grp_seq_align_fu_126_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_seq_align_fu_134_ap_start_reg;
reg    grp_seq_align_fu_142_ap_start_reg;
reg    grp_seq_align_fu_150_ap_start_reg;
reg    grp_seq_align_fu_158_ap_start_reg;
reg    grp_seq_align_fu_166_ap_start_reg;
reg    grp_seq_align_fu_174_ap_start_reg;
reg    grp_seq_align_fu_182_ap_start_reg;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_seq_align_fu_126_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_134_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_142_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_150_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_158_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_166_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_174_ap_start_reg = 1'b0;
#0 grp_seq_align_fu_182_ap_start_reg = 1'b0;
end

seq_align_multiple_seq_align grp_seq_align_fu_126(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_126_ap_start),
    .ap_done(grp_seq_align_fu_126_ap_done),
    .ap_idle(grp_seq_align_fu_126_ap_idle),
    .ap_ready(grp_seq_align_fu_126_ap_ready),
    .chunk1_address0(grp_seq_align_fu_126_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_126_chunk1_ce0),
    .chunk1_q0(chunk1_q0),
    .ref1_address0(grp_seq_align_fu_126_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_126_ref1_ce0),
    .ref1_q0(ref1_q0),
    .ap_return(grp_seq_align_fu_126_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_134(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_134_ap_start),
    .ap_done(grp_seq_align_fu_134_ap_done),
    .ap_idle(grp_seq_align_fu_134_ap_idle),
    .ap_ready(grp_seq_align_fu_134_ap_ready),
    .chunk1_address0(grp_seq_align_fu_134_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_134_chunk1_ce0),
    .chunk1_q0(chunk2_q0),
    .ref1_address0(grp_seq_align_fu_134_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_134_ref1_ce0),
    .ref1_q0(ref2_q0),
    .ap_return(grp_seq_align_fu_134_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_142(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_142_ap_start),
    .ap_done(grp_seq_align_fu_142_ap_done),
    .ap_idle(grp_seq_align_fu_142_ap_idle),
    .ap_ready(grp_seq_align_fu_142_ap_ready),
    .chunk1_address0(grp_seq_align_fu_142_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_142_chunk1_ce0),
    .chunk1_q0(chunk3_q0),
    .ref1_address0(grp_seq_align_fu_142_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_142_ref1_ce0),
    .ref1_q0(ref3_q0),
    .ap_return(grp_seq_align_fu_142_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_150(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_150_ap_start),
    .ap_done(grp_seq_align_fu_150_ap_done),
    .ap_idle(grp_seq_align_fu_150_ap_idle),
    .ap_ready(grp_seq_align_fu_150_ap_ready),
    .chunk1_address0(grp_seq_align_fu_150_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_150_chunk1_ce0),
    .chunk1_q0(chunk4_q0),
    .ref1_address0(grp_seq_align_fu_150_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_150_ref1_ce0),
    .ref1_q0(ref4_q0),
    .ap_return(grp_seq_align_fu_150_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_158(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_158_ap_start),
    .ap_done(grp_seq_align_fu_158_ap_done),
    .ap_idle(grp_seq_align_fu_158_ap_idle),
    .ap_ready(grp_seq_align_fu_158_ap_ready),
    .chunk1_address0(grp_seq_align_fu_158_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_158_chunk1_ce0),
    .chunk1_q0(chunk5_q0),
    .ref1_address0(grp_seq_align_fu_158_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_158_ref1_ce0),
    .ref1_q0(ref5_q0),
    .ap_return(grp_seq_align_fu_158_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_166(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_166_ap_start),
    .ap_done(grp_seq_align_fu_166_ap_done),
    .ap_idle(grp_seq_align_fu_166_ap_idle),
    .ap_ready(grp_seq_align_fu_166_ap_ready),
    .chunk1_address0(grp_seq_align_fu_166_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_166_chunk1_ce0),
    .chunk1_q0(chunk6_q0),
    .ref1_address0(grp_seq_align_fu_166_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_166_ref1_ce0),
    .ref1_q0(ref6_q0),
    .ap_return(grp_seq_align_fu_166_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_174(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_174_ap_start),
    .ap_done(grp_seq_align_fu_174_ap_done),
    .ap_idle(grp_seq_align_fu_174_ap_idle),
    .ap_ready(grp_seq_align_fu_174_ap_ready),
    .chunk1_address0(grp_seq_align_fu_174_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_174_chunk1_ce0),
    .chunk1_q0(chunk7_q0),
    .ref1_address0(grp_seq_align_fu_174_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_174_ref1_ce0),
    .ref1_q0(ref7_q0),
    .ap_return(grp_seq_align_fu_174_ap_return)
);

seq_align_multiple_seq_align grp_seq_align_fu_182(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seq_align_fu_182_ap_start),
    .ap_done(grp_seq_align_fu_182_ap_done),
    .ap_idle(grp_seq_align_fu_182_ap_idle),
    .ap_ready(grp_seq_align_fu_182_ap_ready),
    .chunk1_address0(grp_seq_align_fu_182_chunk1_address0),
    .chunk1_ce0(grp_seq_align_fu_182_chunk1_ce0),
    .chunk1_q0(chunk8_q0),
    .ref1_address0(grp_seq_align_fu_182_ref1_address0),
    .ref1_ce0(grp_seq_align_fu_182_ref1_ce0),
    .ref1_q0(ref8_q0),
    .ap_return(grp_seq_align_fu_182_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_126_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_126_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_126_ap_ready == 1'b1)) begin
            grp_seq_align_fu_126_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_134_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_134_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_134_ap_ready == 1'b1)) begin
            grp_seq_align_fu_134_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_142_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_142_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_142_ap_ready == 1'b1)) begin
            grp_seq_align_fu_142_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_150_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_150_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_150_ap_ready == 1'b1)) begin
            grp_seq_align_fu_150_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_158_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_158_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_158_ap_ready == 1'b1)) begin
            grp_seq_align_fu_158_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_166_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_166_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_166_ap_ready == 1'b1)) begin
            grp_seq_align_fu_166_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_174_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_174_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_174_ap_ready == 1'b1)) begin
            grp_seq_align_fu_174_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seq_align_fu_182_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_seq_align_fu_182_ap_start_reg <= 1'b1;
        end else if ((grp_seq_align_fu_182_ap_ready == 1'b1)) begin
            grp_seq_align_fu_182_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy1_out_ap_vld = 1'b1;
    end else begin
        dummy1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy2_out_ap_vld = 1'b1;
    end else begin
        dummy2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy3_out_ap_vld = 1'b1;
    end else begin
        dummy3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy4_out_ap_vld = 1'b1;
    end else begin
        dummy4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy5_out_ap_vld = 1'b1;
    end else begin
        dummy5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy6_out_ap_vld = 1'b1;
    end else begin
        dummy6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy7_out_ap_vld = 1'b1;
    end else begin
        dummy7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        dummy8_out_ap_vld = 1'b1;
    end else begin
        dummy8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_seq_align_fu_182_ap_done == 1'b0) | (grp_seq_align_fu_174_ap_done == 1'b0) | (grp_seq_align_fu_166_ap_done == 1'b0) | (grp_seq_align_fu_158_ap_done == 1'b0) | (grp_seq_align_fu_150_ap_done == 1'b0) | (grp_seq_align_fu_142_ap_done == 1'b0) | (grp_seq_align_fu_134_ap_done == 1'b0) | (grp_seq_align_fu_126_ap_done == 1'b0));
end

assign chunk1_address0 = grp_seq_align_fu_126_chunk1_address0;

assign chunk1_ce0 = grp_seq_align_fu_126_chunk1_ce0;

assign chunk2_address0 = grp_seq_align_fu_134_chunk1_address0;

assign chunk2_ce0 = grp_seq_align_fu_134_chunk1_ce0;

assign chunk3_address0 = grp_seq_align_fu_142_chunk1_address0;

assign chunk3_ce0 = grp_seq_align_fu_142_chunk1_ce0;

assign chunk4_address0 = grp_seq_align_fu_150_chunk1_address0;

assign chunk4_ce0 = grp_seq_align_fu_150_chunk1_ce0;

assign chunk5_address0 = grp_seq_align_fu_158_chunk1_address0;

assign chunk5_ce0 = grp_seq_align_fu_158_chunk1_ce0;

assign chunk6_address0 = grp_seq_align_fu_166_chunk1_address0;

assign chunk6_ce0 = grp_seq_align_fu_166_chunk1_ce0;

assign chunk7_address0 = grp_seq_align_fu_174_chunk1_address0;

assign chunk7_ce0 = grp_seq_align_fu_174_chunk1_ce0;

assign chunk8_address0 = grp_seq_align_fu_182_chunk1_address0;

assign chunk8_ce0 = grp_seq_align_fu_182_chunk1_ce0;

assign dummy1_out = grp_seq_align_fu_126_ap_return;

assign dummy2_out = grp_seq_align_fu_134_ap_return;

assign dummy3_out = grp_seq_align_fu_142_ap_return;

assign dummy4_out = grp_seq_align_fu_150_ap_return;

assign dummy5_out = grp_seq_align_fu_158_ap_return;

assign dummy6_out = grp_seq_align_fu_166_ap_return;

assign dummy7_out = grp_seq_align_fu_174_ap_return;

assign dummy8_out = grp_seq_align_fu_182_ap_return;

assign grp_seq_align_fu_126_ap_start = grp_seq_align_fu_126_ap_start_reg;

assign grp_seq_align_fu_134_ap_start = grp_seq_align_fu_134_ap_start_reg;

assign grp_seq_align_fu_142_ap_start = grp_seq_align_fu_142_ap_start_reg;

assign grp_seq_align_fu_150_ap_start = grp_seq_align_fu_150_ap_start_reg;

assign grp_seq_align_fu_158_ap_start = grp_seq_align_fu_158_ap_start_reg;

assign grp_seq_align_fu_166_ap_start = grp_seq_align_fu_166_ap_start_reg;

assign grp_seq_align_fu_174_ap_start = grp_seq_align_fu_174_ap_start_reg;

assign grp_seq_align_fu_182_ap_start = grp_seq_align_fu_182_ap_start_reg;

assign ref1_address0 = grp_seq_align_fu_126_ref1_address0;

assign ref1_ce0 = grp_seq_align_fu_126_ref1_ce0;

assign ref2_address0 = grp_seq_align_fu_134_ref1_address0;

assign ref2_ce0 = grp_seq_align_fu_134_ref1_ce0;

assign ref3_address0 = grp_seq_align_fu_142_ref1_address0;

assign ref3_ce0 = grp_seq_align_fu_142_ref1_ce0;

assign ref4_address0 = grp_seq_align_fu_150_ref1_address0;

assign ref4_ce0 = grp_seq_align_fu_150_ref1_ce0;

assign ref5_address0 = grp_seq_align_fu_158_ref1_address0;

assign ref5_ce0 = grp_seq_align_fu_158_ref1_ce0;

assign ref6_address0 = grp_seq_align_fu_166_ref1_address0;

assign ref6_ce0 = grp_seq_align_fu_166_ref1_ce0;

assign ref7_address0 = grp_seq_align_fu_174_ref1_address0;

assign ref7_ce0 = grp_seq_align_fu_174_ref1_ce0;

assign ref8_address0 = grp_seq_align_fu_182_ref1_address0;

assign ref8_ce0 = grp_seq_align_fu_182_ref1_ce0;

endmodule //seq_align_multiple
